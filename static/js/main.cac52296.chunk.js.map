{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","components/Icons.tsx","components/Settings.tsx","lib/renderMarkdown.ts","components/ErrorBoundary.tsx","lib/makePrettier.ts","index.tsx"],"names":["HtmlClassName","HtmlElementId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","infoColor","foregroundColor","ChevronIconDown","fill","role","className","aria-label","width","height","viewBox","xmlns","d","ChevronIconRight","EyeIcon","condition","PencilIcon","RefreshIcon","SaveIcon","WindowIcon","Settings","props","onFocus","settings","document","getElementById","classList","add","onBlur","remove","loadDefaultSettings","saveSettings","state","id","this","showSettings","settingsToggleButton","onClick","toggleShowSettings","title","htmlFor","language","name","onChange","handleSelectChange","value","fontSize","tabSize","minimap","checked","type","handleInputChange","theme","wordWrap","buttonSaveSettings","saveDefaultSettings","buttonLoadSettings","buttonRefreshEditor","refreshEditor","buttonToggleEditMode","toggleEditMode","editMode","buttonToggleViewMode","toggleViewMode","viewMode","React","Component","breaks","require","externalLinks","footnotes","gfm","gemoji","math","slug","toc","highlight","rehypeKatex","raw","processor","unified","use","parse","maxDepth","inlineNotes","remark2rehype","allowDangerousHtml","ignoreMissing","rehype2react","createElement","renderMarkdown","debounce","text","processSync","result","processMarkdown","getCodeText","ErrorBoundary","hasError","error","errorInfo","console","setState","message","href","target","rel","children","editor","lastPosition","initialState","refreshTokenEditor","refreshTokenView","debugMode","keyMap","Map","lastBackgroundColor","lastDarkMode","lastRefreshToken","wasEditorFocused","viewScrollTop","Editor","editorKit","saveTimer","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","cancel","flush","refreshView","loadSettings","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","componentDidMount","setTimeout","note","internal","componentManager","saveItemWithPresave","content","codeEditorSettings","JSON","stringify","streamContextItem","undefined","loadedSettings","saveEditorOption","optionKey","optionValue","setComponentDataValueForKey","defaultSettings","callback","settingsString","componentDataValueForKey","platform","event","saveText","saveNote","clearTimeout","refreshMarkdown","onEditorValueChanged","toggleSettingsButton","focus","view","viewContainer","scrollTop","e","onKeyDown","ctrlKey","code","preventDefault","altKey","onKeyUp","delete","key","snComponent","tabIndex","contentContainer","MonacoEditorContainerParentDiv","self","MonacoEnvironment","getWorkerUrl","_moduleId","label","lastLanguage","MonacoEditor","MonacoEditorContainer","divEl","useRef","useEffect","current","defineSnTheme","backgroundColor","borderColor","colorRegExp","whiteSpaceRegExp","tempBackgroundColor","getComputedStyle","documentElement","getPropertyValue","replace","match","contrastBackgroundColor","tempBorderColor","dangerColor","tempContrastBackgroundColor","fadedForegroundColor","fadedTwiceForegroundColor","tempDangerColor","fadedInfoColor","fadedTwiceInfoColor","tempForegroundColor","concat","shadowColor","tempInfoColor","warningColor","tempShadowColor","tempWarningColor","isDarkMode","window","matchMedia","matches","monaco","defineTheme","base","inherit","rules","token","background","foreground","colors","focusBorder","setTheme","create","fontFamily","parseInt","enabled","join","autoClosingOvertype","formatOnPaste","formatOnType","wrappingStrategy","shiftKey","previousPosition","formattedText","prettier","format","parser","plugins","parserCss","parserGraphql","parserMarkdown","parserHtml","parserBabel","parserTypescript","parserYaml","makePrettier","getValue","setValue","revealLineInCenterIfOutsideViewport","lineNumber","setPosition","onDidChangeModelContent","onDidChangeCursorPosition","pos","getPosition","onDidFocusEditorWidget","currentBackgroundColor","onDidBlurEditorWidget","dispose","ref","View","useState","markdown","updateMarkdown","ReactDOM","render","StrictMode"],"mappings":"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mBACpBC,MAAO,gBAJT,SAME,cAAC,EAAD,CAAiBlC,KAAM,gBAI5B6B,KAAKb,MAAMc,cAAgB,CAC1B,0BAAS7B,UAAU,oBAAnB,UACE,uBACEkC,QAASjD,EAAckD,SACvBF,MAAO,4CAFT,2BAMA,8BACE,yBACEN,GAAI1C,EAAckD,SAClBC,KAAMnD,EAAckD,SACpBE,SAAUT,KAAKb,MAAMuB,mBACrBL,MAAO,4CACPM,MAAOX,KAAKb,MAAMoB,SALpB,UAOE,0CACA,yCACA,0CACA,2CACA,yCACA,uCACA,8CACA,6CACA,kDACA,yCACA,4CACA,yCACA,yCACA,0CACA,gDACA,4CACA,wCACA,6CACA,gDACA,yCACA,0CACA,yCACA,0CACA,gDACA,0CACA,2CACA,4CACA,0CACA,2CACA,yCACA,8CACA,0CACA,2CACA,2CACA,iDACA,4CACA,+CACA,0CACA,2CACA,yCACA,+CACA,8CACA,gDACA,gDACA,yCACA,4CACA,uCACA,2CACA,2CACA,8CACA,sDACA,0CACA,0CACA,wCACA,2CACA,4CACA,0CACA,2CACA,yCACA,yCACA,wCACA,2CACA,mDACA,yCACA,0CACA,gDACA,wCACA,6CACA,yCACA,iDApFsClD,EAAckD,UAwF1D,0BAASnC,UAAU,WAAnB,UACE,uBACEkC,QAASjD,EAAcuD,SACvBP,MAAO,8CAFT,4BAMA,qBAAKjC,UAAU,iBAAf,SACE,yBACE2B,GAAI1C,EAAcuD,SAClBJ,KAAMnD,EAAcuD,SACpBH,SAAUT,KAAKb,MAAMuB,mBACrBL,MAAO,8CACPM,MAAOX,KAAKb,MAAMyB,SALpB,UAOE,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,iDA7B6BvD,EAAcuD,UAiCjD,0BAASxC,UAAU,WAAnB,UACE,uBACEkC,QAASjD,EAAcwD,QACvBR,MACE,6DAHJ,2BAQA,qBAAKjC,UAAU,iBAAf,SACE,yBACE2B,GAAI1C,EAAcwD,QAClBL,KAAMnD,EAAcwD,QACpBJ,SAAUT,KAAKb,MAAMuB,mBACrBL,MACE,6DAEFM,MAAOX,KAAKb,MAAM0B,QAPpB,UASE,uCACA,8CApB6BxD,EAAcwD,SAwBjD,0BAASzC,UAAU,WAAnB,UACE,uBACEkC,QAASjD,EAAcyD,QACvBT,MAAO,+CAFT,0BAMA,qBAAKjC,UAAU,iBAAf,SACE,uBAAOA,UAAW,uBAAlB,SACE,uBACE2C,QAASf,KAAKb,MAAM2B,QACpBf,GAAI1C,EAAcyD,QAClBN,KAAMnD,EAAcyD,QACpBT,MAAO,+CACPW,KAAK,WACLP,SAAUT,KAAKb,MAAM8B,0BAfM5D,EAAcyD,SAoBjD,0BAAS1C,UAAU,WAAnB,UACE,uBACEkC,QAASjD,EAAc6D,MACvBb,MAAO,kDAFT,wBAMA,qBAAKjC,UAAU,iBAAf,SACE,yBACE2B,GAAI1C,EAAc6D,MAClBV,KAAMnD,EAAc6D,MACpBT,SAAUT,KAAKb,MAAMuB,mBACrBL,MAAO,kDACPM,MAAOX,KAAKb,MAAM+B,MALpB,UAOE,wCACA,6CACA,8CACA,qDAlB6B7D,EAAc6D,OAsBjD,0BAAS9C,UAAU,WAAnB,UACE,uBACEkC,QAASjD,EAAc8D,SACvBd,MAAO,mDAFT,4BAMA,qBAAKjC,UAAU,iBAAf,SACE,yBACE2B,GAAI1C,EAAc8D,SAClBX,KAAMnD,EAAc8D,SACpBV,SAAUT,KAAKb,MAAMuB,mBACrBL,MAAO,mDACPM,MAAOX,KAAKb,MAAMgC,SALpB,UAOE,wCACA,yCACA,oDAjB6B9D,EAAc8D,WAsBnD,0BAAS/C,UAAU,mBAAnB,UACG4B,KAAKb,MAAMc,cAAgB,CAC1B,wBACE7B,UAAW,yCAEX2B,GAAI1C,EAAc+D,mBAClBjB,QAASH,KAAKb,MAAMkC,oBACpBhB,MAAM,iDALR,SAOE,cAAC,EAAD,CAAUlC,KAAM,YALXd,EAAc+D,oBAOrB,wBACEhD,UAAW,yCAEX2B,GAAI1C,EAAciE,mBAClBnB,QAASH,KAAKJ,oBACdS,MAAM,sCALR,SAOE,cAAC,EAAD,CAAalC,KAAM,YALdd,EAAciE,qBAQvB,wBACElD,UAAW,yCAEX2B,GAAI1C,EAAckE,oBAClBpB,QAASH,KAAKb,MAAMqC,cACpBnB,MAAM,gCALR,SAOE,cAAC,EAAD,CAAYlC,KAAM,YALbd,EAAckE,qBAOrB,wBACEnD,UAAW,yCAEX2B,GAAI1C,EAAcoE,qBAClBtB,QAASH,KAAKb,MAAMuC,eACpBrB,MAAM,mBALR,SAOE,cAAC,EAAD,CAAYxB,UAAWmB,KAAKb,MAAMwC,SAAUxD,KAAM,YAL7Cd,EAAcoE,sBAOrB,wBACErD,UAAW,yCAEX2B,GAAI1C,EAAcuE,qBAClBzB,QAASH,KAAKb,MAAM0C,eACpBxB,MAAM,mBALR,SAOE,cAAC,EAAD,CAASxB,UAAWmB,KAAKb,MAAM2C,SAAU3D,KAAM,YAL1Cd,EAAcuE,gC,GAxTOG,IAAMC,W,iOCzBtCC,GAASC,EAAQ,KACjBC,GAAgBD,EAAQ,KACxBE,GAAYF,EAAQ,KACpBG,GAAMH,EAAQ,KACdI,GAASJ,EAAQ,KACjBK,GAAOL,EAAQ,KACfM,GAAON,EAAQ,KACfO,GAAMP,EAAQ,KAGdQ,GAAYR,EAAQ,KACpBS,GAAcT,EAAQ,KACtBU,GAAMV,EAAQ,KAEdW,GAAYC,MACfC,IAAIC,KACJD,IAAIV,IACJU,IAAId,IACJc,IAAIP,IACJO,IAAIN,GAAK,CAAEQ,SAAU,IACrBF,IAAIZ,IACJY,IAAIX,GAAW,CAAEc,aAAa,IAC9BH,IAAIT,IACJS,IAAII,IAAe,CAAEC,oBAAoB,IACzCL,IAAIH,IACJG,IAAIR,IACJQ,IAAIJ,IACJI,IAAIL,GAAW,CAAEW,eAAe,IAChCN,IAAIO,IAAc,CAAEC,cAAexB,IAAMwB,gBAU/BC,GAAiBC,oBAAS,SAACC,GAGtC,OAX6B,SAACA,GAG9B,OADiBb,GAAUc,YAAYD,GAAME,OAQ5BC,CAAgBH,KAEhC,KAEUI,GAAc,SAACvD,EAAkBmD,GAC5C,MAAiB,aAAbnD,GAAwC,SAAbA,GAAuBmD,EAC7C,MAAQnD,EAAW,KAAOmD,EAAO,QAEjCA,GC3CUK,G,kDAInB,WAAY5E,GAAa,IAAD,8BACtB,cAAMA,IACDW,MAAQ,CAAEkE,UAAU,GAFH,E,8DAUNC,EAAcC,GAE9BC,QAAQF,MAAM,SAAUA,EAAO,gBAAiBC,GAChDlE,KAAKoE,SAAS,CACZH,QACAC,gB,+BAKwB,IAAD,IAAzB,OAAIlE,KAAKF,MAAMkE,SAGX,sBAAK5F,UAAU,iBAAf,UACE,uDACA,6CACc,yCAAO4B,KAAKF,MAAMmE,aAAlB,aAAO,EAAkBzD,UAEvC,gDACiB,yCAAOR,KAAKF,MAAMmE,aAAlB,aAAO,EAAkBI,aAE1C,6CACc,+BAAOrE,KAAKF,MAAMoE,eAEhC,8EACA,uBACA,kHAEoB,IAClB,mBACEI,KAAK,oDACLC,OAAO,SACPC,IAAI,sBAHN,wCAMK,IATP,mCAgBCxE,KAAKb,MAAMsF,Y,gDA/CYR,GAE9B,MAAO,CAAED,UAAU,O,GAXoBjC,IAAMC,Y,SLDrC5E,K,gEAAAA,E,8CAAAA,E,2BAAAA,E,uCAAAA,M,cAOAC,K,oBAAAA,E,oBAAAA,E,kBAAAA,E,kBAAAA,E,cAAAA,E,oBAAAA,E,8BAAAA,E,4CAAAA,E,wCAAAA,E,0CAAAA,E,wCAAAA,E,4CAAAA,E,oCAAAA,E,8CAAAA,E,6BAAAA,E,4CAAAA,E,2BAAAA,E,+BAAAA,M,KA4CZ,IAkBIqH,GAIAC,GAtBEC,GAAe,CACnBjD,UAAU,EACVf,SAAU,OACVL,SAAU,WACVO,SAAS,EACT+D,oBAAoB,EACpBC,kBAAkB,EAClB7E,cAAc,EACdY,QAAS,EACT6C,KAAM,GACNxC,MAAO,WACPY,UAAU,EACVX,SAAU,MAGN4D,IAAY,EACdC,GAAS,IAAIC,IAIbC,GAAsB,QACtBC,IAAe,EAEfC,IAAmB,EACnBC,IAAmB,EACnBC,GAAgB,EAECC,G,kDAInB,WAAYpG,GAAyB,IAAD,8BAClC,cAAMA,IAJRqG,eAGoC,IAFpCC,eAEoC,IAKpCC,mBAAqB,WACnB,IAAIC,EAAW,IAAIC,oBAAkB,CAEnCC,iBAAkB,SAACnC,GACjB,EAAKU,SACH,CACEV,SAEF,WACM,EAAK5D,MAAMgC,WACb0B,GAAesC,SACftC,GAAeM,GAAY,EAAKhE,MAAMS,SAAUmD,IAChDF,GAAeuC,QACf,EAAKC,eAGP,EAAKpG,qBAAoB,eACzB,EAAKqG,mBAIXC,iBAAkB,aAClBC,sBAAuB,iBAAM,MAG/B,EAAKX,UAAY,IAAIY,YAAU,CAC7BT,SAAUA,EACVU,KAAM,YACNC,kBAAkB,KAjCc,EAqCpCC,kBAAoB,WAClB,EAAKb,qBACLc,YAAW,WACT,EAAKpC,SAAS,CAAEzC,UAAU,MACzB,MAzC+B,EA4CpC9B,aAAe,WACb,IACE,IACIR,EADEoH,EAAO,EAAKjB,UAAUkB,SAASD,KAErCpH,EAAW,CACTuB,SAAU,EAAKd,MAAMc,SACrBL,SAAU,EAAKT,MAAMS,SACrBO,QAAS,EAAKhB,MAAMgB,QACpBD,QAAS,EAAKf,MAAMe,QACpBK,MAAO,EAAKpB,MAAMoB,MAClBC,SAAU,EAAKrB,MAAMqB,UAEvB,EAAKqE,UAAUkB,SAASC,iBAAiBC,oBAAoBH,GAAM,WACjEA,EAAKI,QAAQC,mBAAqBC,KAAKC,UAAU3H,MAEnD,MAAO4E,GACPE,QAAQF,MAAM,wBAAyBA,KA5DP,EAgEpCgC,aAAe,WACb,EAAKT,UAAUkB,SAASC,iBAAiBM,mBAAkB,SAACR,GAE1D,QAAwCS,IAApCT,EAAKI,QAAQC,mBAAkC,CACjD,IAAMK,EAAiBJ,KAAK/D,MAC1ByD,EAAKI,QAAQC,oBAEf,EAAK1C,SAAS,CACZxD,SAAUuG,EAAevG,SACzBL,SAAU4G,EAAe5G,SACzBO,QAASqG,EAAerG,QACxBD,QAASsG,EAAetG,QACxBK,MAAOiG,EAAejG,MACtBC,SAAUgG,EAAehG,gBA7EG,EAmFpCiG,iBAAmB,SAACC,EAAmBC,GACrC,IACE,EAAK9B,UAAUkB,SAASC,iBAAiBY,4BACvCF,EACAC,GAEF,MAAOrD,GACPE,QAAQF,MACN,8CACAoD,EACA,0BACAC,EACA,mBACArD,KAhG8B,EAqGpC5C,oBAAsB,WACpB,IAAImG,EACJA,EAAkB,CAChB5G,SAAU,EAAKd,MAAMc,SACrBL,SAAU,EAAKT,MAAMS,SACrBO,QAAS,EAAKhB,MAAMgB,QACpBD,QAAS,EAAKf,MAAMe,QACpBK,MAAO,EAAKpB,MAAMoB,MAClBC,SAAU,EAAKrB,MAAMqB,UAEvB,EAAKiG,iBAAiB,kBAAmBL,KAAKC,UAAUQ,KA/GtB,EAkHpC5H,oBAAsB,SAAC6H,GACrB,IACE,IAAMC,EAAiB,EAAKlC,UAAUkB,SAASC,iBAAiBgB,yBAC9D,mBAEF,QAAuBT,IAAnBQ,EAA8B,CAChC,IAAMF,EAAkBT,KAAK/D,MAAM0E,GAC/B3C,GAGJ,EAAKX,SACH,CACExD,SAAU4G,EAAgB5G,SAC1BL,SAAUiH,EAAgBjH,SAC1BO,QAAS0G,EAAgB1G,QACzBD,QAAS2G,EAAgB3G,QACzBK,MAAOsG,EAAgBtG,MACvBC,SAAUqG,EAAgBrG,WAE5B,WACMsG,GACFA,OAKR,EAAKrD,SACH,CACEwD,SAAU,EAAKpC,UAAUkB,SAASC,iBAAiBiB,WAErD,WACM7C,MAKR,MAAOd,GAEPE,QAAQF,MAAM,gCAAiCA,KAxJf,EA4JpChD,kBAAoB,SAAC4G,GACnB,IAAMtD,EAASsD,EAAMtD,OACf5D,EAAwB,aAAhB4D,EAAOvD,KAAsBuD,EAAOxD,QAAUwD,EAAO5D,MAC7DH,EAAO+D,EAAO/D,KACpB,EAAK4D,SAAL,eAEK5D,EAAOG,IAEV,WACe,YAATH,GACF,EAAKX,mBAtKuB,EA4KpCa,mBAAqB,SAACmH,GACpB,IAAMtD,EAASsD,EAAMtD,OACf5D,EAAQ4D,EAAO5D,MACfH,EAAO+D,EAAO/D,KACpB,EAAK4D,SAAL,eAEK5D,EAAOG,IAEV,WASE,EAAKd,mBA7LyB,EAkMpCiI,SAAW,SAACpE,GACV,EAAKqE,SAASrE,GACd,EAAKU,SACH,CACEV,KAAMA,IAER,WACM,EAAK5D,MAAMgC,WACT,EAAK2D,WACPuC,aAAa,EAAKvC,WAEpB,EAAKwC,uBA7MuB,EAmNpCF,SAAW,SAACrE,GAIV,IACE,EAAK8B,UAAU0C,qBAAqBxE,GACpC,MAAOO,GACPE,QAAQF,MAAM,qBAAsBA,KA1NJ,EA8NpCzC,cAAgB,WACd,EAAK4C,SAAS,CACZS,oBAAqB,EAAK/E,MAAM+E,sBAhOA,EAoOpCoD,gBAAkB,WAChB,EAAKxC,UAAYe,YAAW,WAC1BhD,GAAesC,SACf,EAAKE,gBACJ,MAxO+B,EA2OpCA,YAAc,WACZ,EAAK5B,SAAS,CACZU,kBAAmB,EAAKhF,MAAMgF,oBA7OE,EAiPpC1E,mBAAqB,WACnB,EAAKgE,SACH,CACEnE,cAAe,EAAKH,MAAMG,eAE5B,WAEO,EAAKH,MAAMG,cACd,EAAKuB,gBAEP,IAAM2G,EAAuB7I,SAASC,eACpClC,EAAc6C,sBAEZiI,GACFA,EAAqBC,YA/PO,EAqQpC1G,eAAiB,WACV,EAAK5B,MAAM6B,SAIL,EAAK7B,MAAM6B,UACpB,EAAKyC,SACH,CACEzC,UAAU,EACVG,UAAU,IAEZ,WAEE,EAAKmG,qBAXT,EAAK7D,SAAS,CACZzC,UAAU,KAxQoB,EAwRpCE,eAAiB,WACf,GAAK,EAAK/B,MAAMgC,UAcT,GAAI,EAAKhC,MAAMgC,SAAU,CAE9B,IAAMuG,EAAO/I,SAASC,eAAelC,EAAciL,eAC/CD,IACF/C,GAAgB+C,EAAKE,WAElB,EAAKzI,MAAM6B,SAML,EAAK7B,MAAM6B,UACpB,EAAKyC,SACH,CACEtC,UAAU,IAEZ,WAEE,EAAKN,mBAXT,EAAK4C,SAAS,CACZzC,UAAU,EACVG,UAAU,UAvBd,EAAKsC,SACH,CACEtC,UAAU,IAEZ,WACE,EAAKN,gBACL,IAAM6G,EAAO/I,SAASC,eAAelC,EAAciL,eAC/CD,IACFA,EAAKE,UAAYjD,IAEnB,EAAK2C,sBApSuB,EAiUpCvI,OAAS,SAAC8I,KAjU0B,EAmUpCpJ,QAAU,SAACoJ,KAnUyB,EAsUpCC,UAAY,SAACD,GAEPA,EAAEE,SAAsB,SAAXF,EAAEG,KACjBH,EAAEI,iBACOJ,EAAEK,QAAqB,SAAXL,EAAEG,OAEK,OAAxB,EAAK7I,MAAMqB,SACb,EAAKiD,SAAS,CACZjD,SAAU,QAEqB,QAAxB,EAAKrB,MAAMqB,UACpB,EAAKiD,SAAS,CACZjD,SAAU,SAlVkB,EAwVpC2H,QAAU,SAACN,GACTxD,GAAO+D,OAAOP,EAAEQ,MAvVhB,EAAKlJ,MAAQ8E,GAFqB,E,qDA6VlC,OACE,sBACExG,UAAWf,EAAc4L,YAAc,IAAMjJ,KAAKF,MAAMoB,MACxDnB,GAAI1C,EAAc4L,YAClBC,SAAU,EAHZ,UAKE,sBACEnJ,GAAI1C,EAAc8L,iBAClB/K,WACG4B,KAAKF,MAAM6B,SAAW,WAAa,IACpC,KACC3B,KAAKF,MAAMgC,SAAW,WAAa,IACpC,KACC9B,KAAKF,MAAMG,aAAe,eAAiB,gBAPhD,UAUGD,KAAKF,MAAM6B,UACV,qBACEvD,UACEhB,EAAcgM,+BACd,IACApJ,KAAKF,MAAMoB,MAJf,SAOE,cAAC,GAAD,UACE,cAAC,GAAD,CACEN,SAAUZ,KAAKF,MAAMc,SACrBL,SAAUP,KAAKF,MAAMS,SACrBO,QAASd,KAAKF,MAAMgB,QACpB2H,UAAWzI,KAAKyI,UAChB5D,mBAAoB7E,KAAKF,MAAM+E,mBAC/BiD,SAAU9H,KAAK8H,SACfjH,QAASb,KAAKF,MAAMe,QACpB6C,KAAM1D,KAAKF,MAAM4D,KACjBxC,MAAOlB,KAAKF,MAAMoB,MAClBC,SAAUnB,KAAKF,MAAMqB,eAK5BnB,KAAKF,MAAMgC,UACV,cAAC,GAAD,UACE,cAAC,GAAD,CACEvB,SAAUP,KAAKF,MAAMS,SACrBuE,iBAAkB9E,KAAKF,MAAMgF,iBAC7BpB,KAAM1D,KAAKF,MAAM4D,YAKzB,cAAC,GAAD,UACE,cAAC,EAAD,CACEqB,UAAWA,GACXpD,SAAU3B,KAAKF,MAAM6B,SACrBf,SAAUZ,KAAKF,MAAMc,SACrBK,kBAAmBjB,KAAKiB,kBACxBP,mBAAoBV,KAAKU,mBACzBH,SAAUP,KAAKF,MAAMS,SACrBO,QAASd,KAAKF,MAAMgB,QACpBlB,oBAAqBI,KAAKJ,oBAC1B4B,cAAexB,KAAKwB,cACpB3B,aAAcG,KAAKH,aACnBwB,oBAAqBrB,KAAKqB,oBAC1BpB,aAAcD,KAAKF,MAAMG,aACzBY,QAASb,KAAKF,MAAMe,QACpBK,MAAOlB,KAAKF,MAAMoB,MAClBQ,eAAgB1B,KAAK0B,eACrBtB,mBAAoBJ,KAAKI,mBACzByB,eAAgB7B,KAAK6B,eACrBC,SAAU9B,KAAKF,MAAMgC,SACrBX,SAAUnB,KAAKF,MAAMqB,oB,GAvaGY,IAAMC,WAmb1CqH,KAAKC,kBAAoB,CACvBC,aAAc,SAAUC,EAAgBC,GACtC,MAAc,SAAVA,EACK,iCAEK,QAAVA,GAA6B,SAAVA,GAA8B,SAAVA,EAClC,gCAEK,SAAVA,GAA8B,eAAVA,GAAoC,UAAVA,EACzC,iCAEK,eAAVA,GAAoC,eAAVA,EACrB,+BAEF,qCAIX,IAybIC,GA9ZSC,GAA4C,SAAC,GAYnD,IAAD,IAXJ/I,gBAWI,MAXO,OAWP,MAVJb,UAUI,MAVC1C,EAAcuM,sBAUf,MATJrJ,gBASI,MATO,aASP,MARJO,eAQI,SAPJ2H,EAOI,EAPJA,UACA5D,EAMI,EANJA,mBACAiD,EAKI,EALJA,SAKI,IAJJjH,eAII,MAJM,EAIN,EAHJ6C,EAGI,EAHJA,KAGI,IAFJxC,aAEI,MAFI,UAEJ,MADJC,gBACI,MADO,KACP,EACE0I,EAAQC,iBAAuB,MAyTrC,OAxTAC,qBAAU,WACR,GAAIF,EAAMG,QAAS,CACjB,IAAMC,EAAgB,WACpB,IAGIC,EAYAC,EAfEC,EAAc,wCACdC,EAAmB,OAGrBC,EAAsBC,iBAAiBjL,SAASkL,iBACjDC,iBAAiB,kCACjBC,QAAQL,EAAkB,IAExBC,EAAoBK,MAAMP,GAI7BF,EAAkBI,GAHlBnG,QAAQF,MAAM,iCAAkCqG,GAChDJ,EAAkB,WAMpB,IAUIU,EAVAC,EAAkBN,iBAAiBjL,SAASkL,iBAC7CC,iBAAiB,8BACjBC,QAAQL,EAAkB,IACxBQ,EAAgBF,MAAMP,GAIzBD,EAAcU,GAHd1G,QAAQF,MAAM,6BAA8B4G,GAC5CV,EAAc,WAMhB,IAeIW,EAfAC,EAA8BR,iBAChCjL,SAASkL,iBAERC,iBAAiB,2CACjBC,QAAQL,EAAkB,IACxBU,EAA4BJ,MAAMP,GAOrCQ,EAA0BG,GAN1B5G,QAAQF,MACN,0CACA8G,GAEFH,EAA0B,WAM5B,IAUI5M,EACAgN,EACAC,EAZAC,EAAkBX,iBAAiBjL,SAASkL,iBAC7CC,iBAAiB,8BACjBC,QAAQL,EAAkB,IACxBa,EAAgBP,MAAMP,GAIzBU,EAAcI,GAHd/G,QAAQF,MAAM,6BAA8BiH,GAC5CJ,EAAc,WAQhB,IAqBI/M,EACAoN,EACAC,EAvBAC,EAAsBd,iBAAiBjL,SAASkL,iBACjDC,iBAAiB,kCACjBC,QAAQL,EAAkB,IACxBgB,EAAoBV,MAAMP,IAM7BpM,EAAkBqN,GACGC,OAAO,MAAMX,MAAMP,IAItCY,EAAuBK,EAAoBC,OAAO,MAClDL,EAA4BI,EAAoBC,OAC9C,QALFN,EAAuB,YACvBC,EAA4B,cAR9B9G,QAAQF,MAAM,iCAAkCoH,GAChDrN,EAAkB,UAClBgN,EAAuB,YACvBC,EAA4B,aAiB9B,IAoBIM,EApBAC,EAAgBjB,iBAAiBjL,SAASkL,iBAC3CC,iBAAiB,4BACjBC,QAAQL,EAAkB,IACxBmB,EAAcb,MAAMP,IAMvBrM,EAAYyN,EAEPA,EAAcF,OAAO,MAAMX,MAAMP,IAIpCe,EAAiBK,EAAcF,OAAO,MACtCF,EAAsBI,EAAcF,OAAO,QAJ3CH,EAAiB,YACjBC,EAAsB,eATxBjH,QAAQF,MAAM,2BAA4BuH,GAC1CzN,EAAY,UACZoN,EAAiB,YACjBC,EAAsB,aAcxB,IAUIK,EAVAC,EAAkBnB,iBAAiBjL,SAASkL,iBAC7CC,iBAAiB,8BACjBC,QAAQL,EAAkB,IACxBqB,EAAgBf,MAAMP,GAIzBmB,EAAcG,GAHdvH,QAAQF,MAAM,6BAA8ByH,GAC5CH,EAAc,WAMhB,IAAII,EAAmBpB,iBAAiBjL,SAASkL,iBAC9CC,iBAAiB,+BACjBC,QAAQL,EAAkB,IACxBsB,EAAiBhB,MAAMP,GAI1BqB,EAAeE,GAHfxH,QAAQF,MAAM,8BAA+B0H,GAC7CF,EAAe,WAKjB,IAAIG,EAAaC,OAAOC,WAAW,gCAChCC,QACHC,IAAcC,YAAY,WAAY,CAEpCC,KAAON,EAAoB,UAAP,KACpBO,SAAS,EACTC,MAAO,CACL,CACEC,MAAO,GACPC,WAAYpC,EACZqC,WAAYvO,IAGhBwO,OAAQ,CAIN,oBAAqBtC,EACrB,oBAAqBlM,EACrB,yBAA0B4M,EAG1B,sBAAuBA,EACvB,kBAAmBT,EACnB,sBAAuBnM,EAEvB,oBAAqBkM,EACrB,oBAAqBlM,EACrB,qCAAsCoN,EACtC,6BAA8BH,EAC9B,6BAA8BE,EAE9B,0BAA2BH,EAC3B,yBAA0BF,EAE1B,8BAA+BE,EAC/B,8BAA+BjN,EAE/B,0BAA2B6M,EAC3B,sBAAuBT,EACvB,2BAA4BsB,EAE5BgB,YAAa1O,EAEb,mBAAoBmM,EACpB,eAAgBC,EAChB,mBAAoBnM,EAEpB,uBAAwBmN,EACxB,uBAAwBnN,EACxB,iCAAkCmN,EAClC,iCAAkCnN,EAClC,mCAAoCkM,EACpC,mCAAoClM,EACpC,uBAAwBkM,EACxB,uBAAwBlM,EACxB,sBAAuBkM,EACvB,2BAA4BlM,EAE5B,4BAA6BD,EAC7B,sBAAuBA,EAEvB,gBAAiBwN,KAGrBS,IAAcU,SAASxL,IAGX,aAAVA,GACF+I,KAGFvF,GAASsH,IAAcW,OAAO9C,EAAMG,QAAS,CAE3C4C,WAAY,oCACZhM,SAAUiM,SAASjM,EAAS8J,QAAQ,KAAM,KAC1CnK,SAAUA,EACVO,QAAS,CACPgM,QAAShM,GAEXD,QAASA,EACTK,MAAOA,EAEPC,SAAUA,EAEVR,MAAO,CAAC+C,GAAMqJ,KAAK,MAGnBC,oBAAqB,OACrBC,eAAe,EACfC,cAAc,EACdC,iBAAkB,cAIb1E,WAAU,SAACD,GAChB,GAAIA,EAAEE,SAAsB,SAAXF,EAAEG,KACjBH,EAAEI,sBACG,GAAIJ,EAAE4E,UAAY5E,EAAEK,QAAqB,SAAXL,EAAEG,KAAiB,CAEtDH,EAAEI,iBACF,IAAMyE,EAAmB1I,GACnB2I,EMhyBY,SAAC/M,EAAkBmD,GAC7C,IACE,GAAiB,QAAbnD,EAKF,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,MACRC,QAAS,CAACC,OAGP,GAAiB,YAAbpN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,UACRC,QAAS,CAACE,OAGP,GAAiB,aAAbrN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,WACRC,QAAS,CAACG,OAGP,GAAiB,SAAbtN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,OACRC,QAAS,CAACI,OAGP,GAAiB,eAAbvN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,QACRC,QAAS,CAACK,OAGP,GAAiB,SAAbxN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,OACRC,QAAS,CAACC,OAGP,GAAiB,eAAbpN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,aACRC,QAAS,CAACM,OAGP,GAAiB,SAAbzN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,OACRC,QAAS,CAACC,OAGP,GAAiB,SAAbpN,EAKT,OAJsBgN,IAASC,OAAO9J,EAAM,CAC1C+J,OAAQ,OACRC,QAAS,CAACO,OAId,MAAOhK,GACPE,QAAQF,MAAM,yBAA0BA,INsuBZiK,CAAa3N,EAAUmE,GAAOyJ,YAChDb,GACF5I,GAAO0J,SAASd,IAElB3I,GAAe0I,KAEb3I,GAAO2J,oCAAoC1J,GAAa2J,YACxD5J,GAAO6J,YAAY5J,KAGR6D,EAAEG,KACjBF,EAAUD,MAGZ9D,GAAOoE,SAAQ,SAACN,GACDA,EAAEG,QAIjBjE,GAAO8J,yBACL,SAAChG,GACKV,GACFA,EAASpD,GAAOyJ,eAKtBzJ,GAAO+J,2BACL,SAACjG,GACC,IAAIkG,EAAMhK,GAAOiK,cACbD,IACF/J,GAAe+J,MAKrBhK,GAAOkK,wBAAuB,WAC5BvJ,IAAmB,EAGnB,IAAIwJ,EAAyBtE,iBAC3BjL,SAASkL,iBACTC,iBAAiB,kCACfmB,EAAaC,OAAOC,WAAW,gCAChCC,QAED7G,KAAwB2J,GACxB1J,KAAiByG,IAEjB1G,GAAsB2J,EACtB1J,GAAeyG,EACf3B,QAIJvF,GAAOoK,uBAAsB,WAC3BzJ,IAAmB,KAGjBV,KACFD,GAAO2J,oCAAoC1J,GAAa2J,YACxD5J,GAAO6J,YAAY5J,MAGjBU,IAAoBR,IAAuBO,MAC7CA,GAAmBP,EACnBH,GAAO0D,SAGX,OAAO,WACL1D,GAAOqK,aAMR,CACDnO,EACAL,EACAO,EACA+D,EACAhE,EACAK,EACAC,IAGA,qBACEpB,GAAIA,EACJ3B,UAAWhB,EAAcwM,sBAAwB,IAAM1I,EACvD8N,IAAKnF,KAqFEoF,GAA4B,SAAC,GAInC,IAHL1O,EAGI,EAHJA,SACAuE,EAEI,EAFJA,iBACApB,EACI,EADJA,KACI,EAC+BwL,mBACjC1L,GAAeM,GAAYvD,EAAUmD,KAFnC,mBACGyL,EADH,KACaC,EADb,KAaJ,OATArF,qBAAU,WACJL,KAAiBnJ,IACnBmJ,GAAenJ,EACfiD,GAAesC,SACftC,GAAeM,GAAYvD,EAAUmD,IACrCF,GAAeuC,SAEjBqJ,EAAe5L,GAAeM,GAAYvD,EAAUmD,OACnD,CAACnD,EAAUmD,EAAMoB,IACb,qBAAK/E,GAAI1C,EAAciL,cAAvB,SAAuC6G,K,OOn+BhDE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFjQ,SAASC,eAAe,SAM1BjC,M","file":"static/js/main.cac52296.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport * as monaco from 'monaco-editor';\n\n/** Components */\nimport Settings from './Settings';\n\n/** Lib */\nimport { makePrettier } from '../lib/makePrettier';\nimport { getCodeText, renderMarkdown } from '../lib/renderMarkdown';\nimport ErrorBoundary from './ErrorBoundary';\n\nexport enum HtmlClassName {\n  MonacoEditorContainerParentDiv = 'MonacoEditorContainerParentDiv',\n  MonacoEditorContainer = 'MonacoEditorContainer',\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\n\nexport enum HtmlElementId {\n  fontSize = 'fontSize',\n  language = 'language',\n  minimap = 'minimap',\n  tabSize = 'tabSize',\n  theme = 'theme',\n  wordWrap = 'wordWrap',\n  saveAsDefault = 'saveAsDefault',\n\n  buttonToggleEditMode = 'buttonToggleEditMode',\n  buttonLoadSettings = 'buttonLoadSettings',\n  buttonRefreshEditor = 'buttonRefreshEditor',\n  buttonSaveSettings = 'buttonSaveSettings',\n  buttonToggleViewMode = 'buttonToggleViewMode',\n\n  contentContainer = 'contentContainer',\n  MonacoEditorContainer = 'MonacoEditorContainer',\n  settings = 'settingsContainer',\n  settingsToggleButton = 'settingsToggleButton',\n  snComponent = 'sn-component',\n  viewContainer = 'viewContainer',\n}\n\nexport interface SettingsInterface {\n  fontSize: string;\n  language: string;\n  minimap: boolean;\n  tabSize: number;\n  theme: string;\n  wordWrap: string;\n}\n\nexport interface EditorInterface extends SettingsInterface {\n  editMode: boolean;\n  text: string;\n  platform?: string;\n  refreshTokenEditor: boolean;\n  refreshTokenView: boolean;\n  showSettings: boolean;\n  viewMode: boolean;\n  /** this is used for handleSelectChange, but could mess with type checking */\n  [x: string]: string | number | boolean | undefined;\n}\n\nconst initialState = {\n  editMode: false,\n  fontSize: '16px',\n  language: 'markdown',\n  minimap: true,\n  refreshTokenEditor: false,\n  refreshTokenView: false,\n  showSettings: true,\n  tabSize: 2,\n  text: '',\n  theme: 'sn-theme',\n  viewMode: false,\n  wordWrap: 'on',\n};\n\nconst debugMode = false;\nlet keyMap = new Map();\n\nlet editor: monaco.editor.IStandaloneCodeEditor;\nlet diffEditor: monaco.editor.IStandaloneDiffEditor;\nlet lastBackgroundColor = 'white';\nlet lastDarkMode = true;\nlet lastPosition: monaco.IPosition;\nlet lastRefreshToken = false;\nlet wasEditorFocused = true;\nlet viewScrollTop = 0;\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n  saveTimer: NodeJS.Timeout | undefined;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            text,\n          },\n          () => {\n            if (this.state.viewMode) {\n              renderMarkdown.cancel();\n              renderMarkdown(getCodeText(this.state.language, text));\n              renderMarkdown.flush();\n              this.refreshView();\n            }\n            /** Wait until the text has been loaded to show the editor */\n            this.loadDefaultSettings(() => {});\n            this.loadSettings();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  componentDidMount = () => {\n    this.configureEditorKit();\n    setTimeout(() => {\n      this.setState({ editMode: true });\n    }, 250);\n  };\n\n  saveSettings = () => {\n    try {\n      const note = this.editorKit.internal.note;\n      let settings: SettingsInterface;\n      settings = {\n        fontSize: this.state.fontSize,\n        language: this.state.language,\n        minimap: this.state.minimap,\n        tabSize: this.state.tabSize,\n        theme: this.state.theme,\n        wordWrap: this.state.wordWrap,\n      };\n      this.editorKit.internal.componentManager.saveItemWithPresave(note, () => {\n        note.content.codeEditorSettings = JSON.stringify(settings);\n      });\n    } catch (error) {\n      console.error('Error saving settings', error);\n    }\n  };\n\n  loadSettings = () => {\n    this.editorKit.internal.componentManager.streamContextItem((note: any) => {\n      // Load editor settings\n      if (note.content.codeEditorSettings !== undefined) {\n        const loadedSettings = JSON.parse(\n          note.content.codeEditorSettings\n        ) as SettingsInterface;\n        this.setState({\n          fontSize: loadedSettings.fontSize,\n          language: loadedSettings.language,\n          minimap: loadedSettings.minimap,\n          tabSize: loadedSettings.tabSize,\n          theme: loadedSettings.theme,\n          wordWrap: loadedSettings.wordWrap,\n        });\n      }\n    });\n  };\n\n  saveEditorOption = (optionKey: string, optionValue: string) => {\n    try {\n      this.editorKit.internal.componentManager.setComponentDataValueForKey(\n        optionKey,\n        optionValue\n      );\n    } catch (error) {\n      console.error(\n        'Error saving editor option. Your optionKey:',\n        optionKey,\n        '\\n - Your optionValue: ',\n        optionValue,\n        '\\n - The error: ',\n        error\n      );\n    }\n  };\n\n  saveDefaultSettings = () => {\n    let defaultSettings: SettingsInterface;\n    defaultSettings = {\n      fontSize: this.state.fontSize,\n      language: this.state.language,\n      minimap: this.state.minimap,\n      tabSize: this.state.tabSize,\n      theme: this.state.theme,\n      wordWrap: this.state.wordWrap,\n    };\n    this.saveEditorOption('defaultSettings', JSON.stringify(defaultSettings));\n  };\n\n  loadDefaultSettings = (callback: () => void) => {\n    try {\n      const settingsString = this.editorKit.internal.componentManager.componentDataValueForKey(\n        'defaultSettings'\n      );\n      if (settingsString !== undefined) {\n        const defaultSettings = JSON.parse(settingsString) as SettingsInterface;\n        if (debugMode) {\n          console.log('defaultSettings', defaultSettings);\n        }\n        this.setState(\n          {\n            fontSize: defaultSettings.fontSize,\n            language: defaultSettings.language,\n            minimap: defaultSettings.minimap,\n            tabSize: defaultSettings.tabSize,\n            theme: defaultSettings.theme,\n            wordWrap: defaultSettings.wordWrap,\n          },\n          () => {\n            if (callback) {\n              callback();\n            }\n          }\n        );\n      }\n      this.setState(\n        {\n          platform: this.editorKit.internal.componentManager.platform,\n        },\n        () => {\n          if (debugMode) {\n            console.log(this.state.platform);\n          }\n        }\n      );\n    } catch (error) {\n      // Log outside debug mode\n      console.error('Error loading editor options:', error);\n    }\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        if (name === 'minimap') {\n          this.saveSettings();\n        }\n      }\n    );\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        if (debugMode) {\n          console.log(\n            'Saved select. Name: ' +\n              event.target.name +\n              ' Value: ' +\n              event.target.value\n          );\n        }\n        this.saveSettings();\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState(\n      {\n        text: text,\n      },\n      () => {\n        if (this.state.viewMode) {\n          if (this.saveTimer) {\n            clearTimeout(this.saveTimer);\n          }\n          this.refreshMarkdown();\n        }\n      }\n    );\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.error('Error saving note:', error);\n    }\n  };\n\n  refreshEditor = () => {\n    this.setState({\n      refreshTokenEditor: !this.state.refreshTokenEditor,\n    });\n  };\n\n  refreshMarkdown = () => {\n    this.saveTimer = setTimeout(() => {\n      renderMarkdown.cancel();\n      this.refreshView();\n    }, 550);\n  };\n\n  refreshView = () => {\n    this.setState({\n      refreshTokenView: !this.state.refreshTokenView,\n    });\n  };\n\n  toggleShowSettings = () => {\n    this.setState(\n      {\n        showSettings: !this.state.showSettings,\n      },\n      () => {\n        /** Refresh the editor to increase its height */\n        if (!this.state.showSettings) {\n          this.refreshEditor();\n        }\n        const toggleSettingsButton = document.getElementById(\n          HtmlElementId.settingsToggleButton\n        );\n        if (toggleSettingsButton) {\n          toggleSettingsButton.focus();\n        }\n      }\n    );\n  };\n\n  toggleEditMode = () => {\n    if (!this.state.editMode) {\n      this.setState({\n        editMode: true,\n      });\n    } else if (this.state.editMode) {\n      this.setState(\n        {\n          editMode: false,\n          viewMode: true,\n        },\n        () => {\n          /** do this even on the first time */\n          this.refreshMarkdown();\n        }\n      );\n    }\n  };\n\n  toggleViewMode = () => {\n    if (!this.state.viewMode) {\n      this.setState(\n        {\n          viewMode: true,\n        },\n        () => {\n          this.refreshEditor();\n          const view = document.getElementById(HtmlElementId.viewContainer);\n          if (view) {\n            view.scrollTop = viewScrollTop;\n          }\n          this.refreshMarkdown();\n        }\n      );\n    } else if (this.state.viewMode) {\n      /** Record the scroll top of the view container */\n      const view = document.getElementById(HtmlElementId.viewContainer);\n      if (view) {\n        viewScrollTop = view.scrollTop;\n      }\n      if (!this.state.editMode) {\n        /** If the editor is closed, then open it */\n        this.setState({\n          editMode: true,\n          viewMode: false,\n        });\n      } else if (this.state.editMode) {\n        this.setState(\n          {\n            viewMode: false,\n          },\n          () => {\n            /** If the editor is open, refresh the size */\n            this.refreshEditor();\n          }\n        );\n      }\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  // Keyboard Events\n  onKeyDown = (e: monaco.IKeyboardEvent) => {\n    // Do nothing if 'Control' and 's' are pressed\n    if (e.ctrlKey && e.code === 'KeyS') {\n      e.preventDefault();\n    } else if (e.altKey && e.code === 'KeyZ') {\n      /** Toggle word wrap with Alt + Z */\n      if (this.state.wordWrap === 'on') {\n        this.setState({\n          wordWrap: 'off',\n        });\n      } else if (this.state.wordWrap === 'off') {\n        this.setState({\n          wordWrap: 'on',\n        });\n      }\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  render() {\n    return (\n      <div\n        className={HtmlElementId.snComponent + ' ' + this.state.theme}\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <div\n          id={HtmlElementId.contentContainer}\n          className={\n            (this.state.editMode ? 'editMode' : '') +\n            ' ' +\n            (this.state.viewMode ? 'viewMode' : '') +\n            ' ' +\n            (this.state.showSettings ? 'showSettings' : 'hideSettings')\n          }\n        >\n          {this.state.editMode && (\n            <div\n              className={\n                HtmlClassName.MonacoEditorContainerParentDiv +\n                ' ' +\n                this.state.theme\n              }\n            >\n              <ErrorBoundary>\n                <MonacoEditor\n                  fontSize={this.state.fontSize}\n                  language={this.state.language}\n                  minimap={this.state.minimap}\n                  onKeyDown={this.onKeyDown}\n                  refreshTokenEditor={this.state.refreshTokenEditor}\n                  saveText={this.saveText}\n                  tabSize={this.state.tabSize}\n                  text={this.state.text}\n                  theme={this.state.theme}\n                  wordWrap={this.state.wordWrap}\n                />\n              </ErrorBoundary>\n            </div>\n          )}\n          {this.state.viewMode && (\n            <ErrorBoundary>\n              <View\n                language={this.state.language}\n                refreshTokenView={this.state.refreshTokenView}\n                text={this.state.text}\n              />\n            </ErrorBoundary>\n          )}\n        </div>\n        <ErrorBoundary>\n          <Settings\n            debugMode={debugMode}\n            editMode={this.state.editMode}\n            fontSize={this.state.fontSize}\n            handleInputChange={this.handleInputChange}\n            handleSelectChange={this.handleSelectChange}\n            language={this.state.language}\n            minimap={this.state.minimap}\n            loadDefaultSettings={this.loadDefaultSettings}\n            refreshEditor={this.refreshEditor}\n            saveSettings={this.saveSettings}\n            saveDefaultSettings={this.saveDefaultSettings}\n            showSettings={this.state.showSettings}\n            tabSize={this.state.tabSize}\n            theme={this.state.theme}\n            toggleEditMode={this.toggleEditMode}\n            toggleShowSettings={this.toggleShowSettings}\n            toggleViewMode={this.toggleViewMode}\n            viewMode={this.state.viewMode}\n            wordWrap={this.state.wordWrap}\n          />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nconst MonacoDiffEditorContainerID = 'MonacoDiffEditorContainer';\n\n/*eslint no-restricted-globals: [\"error\", \"event\", \"monaco\"]*/\n// @ts-ignore\nself.MonacoEnvironment = {\n  getWorkerUrl: function (_moduleId: any, label: string) {\n    if (label === 'json') {\n      return './monaco/json.worker.bundle.js';\n    }\n    if (label === 'css' || label === 'scss' || label === 'less') {\n      return './monaco/css.worker.bundle.js';\n    }\n    if (label === 'html' || label === 'handlebars' || label === 'razor') {\n      return './monaco/html.worker.bundle.js';\n    }\n    if (label === 'typescript' || label === 'javascript') {\n      return './monaco/ts.worker.bundle.js';\n    }\n    return './monaco/editor.worker.bundle.js';\n  },\n};\n\nconst onKeyDownDebug = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    //console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\nconst onKeyUpDebug = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    //console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\ninterface MonacoEditorTypes {\n  fontSize: string;\n  id?: string;\n  language: string;\n  minimap: boolean;\n  onKeyDown: Function;\n  onKeyUp?: Function;\n  refreshTokenEditor: boolean;\n  saveText: Function;\n  tabSize: number;\n  text: string;\n  theme: string;\n  wordWrap: string;\n}\n\nexport const MonacoEditor: React.FC<MonacoEditorTypes> = ({\n  fontSize = '16px',\n  id = HtmlElementId.MonacoEditorContainer,\n  language = 'javascript',\n  minimap = true,\n  onKeyDown,\n  refreshTokenEditor,\n  saveText,\n  tabSize = 2,\n  text,\n  theme = 'vs-dark',\n  wordWrap = 'on',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divEl.current) {\n      const defineSnTheme = () => {\n        const colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\n        const whiteSpaceRegExp = /\\s+/g;\n\n        let backgroundColor: string;\n        let tempBackgroundColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-background-color')\n          .replace(whiteSpaceRegExp, '');\n\n        if (!tempBackgroundColor.match(colorRegExp)) {\n          console.error('Error parsing background color', tempBackgroundColor);\n          backgroundColor = '#ffffff';\n        } else {\n          backgroundColor = tempBackgroundColor;\n        }\n\n        let borderColor: string;\n        let tempBorderColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-border-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempBorderColor.match(colorRegExp)) {\n          console.error('Error parsing border color', tempBorderColor);\n          borderColor = '#e3e3e3';\n        } else {\n          borderColor = tempBorderColor;\n        }\n\n        let contrastBackgroundColor: string;\n        let tempContrastBackgroundColor = getComputedStyle(\n          document.documentElement\n        )\n          .getPropertyValue('--sn-stylekit-contrast-background-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempContrastBackgroundColor.match(colorRegExp)) {\n          console.error(\n            'Error parsing contrast background color',\n            tempContrastBackgroundColor\n          );\n          contrastBackgroundColor = '#F6F6F6';\n        } else {\n          contrastBackgroundColor = tempContrastBackgroundColor;\n        }\n\n        let dangerColor: string;\n        let tempDangerColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-danger-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempDangerColor.match(colorRegExp)) {\n          console.error('Error parsing danger color', tempDangerColor);\n          dangerColor = '#F80324'; // Red\n        } else {\n          dangerColor = tempDangerColor;\n        }\n\n        let foregroundColor: string;\n        let fadedForegroundColor: string;\n        let fadedTwiceForegroundColor: string;\n        let tempForegroundColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-foreground-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempForegroundColor.match(colorRegExp)) {\n          console.error('Error parsing foreground color', tempForegroundColor);\n          foregroundColor = '#000000';\n          fadedForegroundColor = '#00000099'; /** 60 */\n          fadedTwiceForegroundColor = '#0000001A'; /** 10 */\n        } else {\n          foregroundColor = tempForegroundColor;\n          if (!foregroundColor.concat('99').match(colorRegExp)) {\n            fadedForegroundColor = '#00000099'; /** 60 */\n            fadedTwiceForegroundColor = '#0000001A'; /** 10 */\n          } else {\n            fadedForegroundColor = tempForegroundColor.concat('99'); /** 60% */\n            fadedTwiceForegroundColor = tempForegroundColor.concat(\n              '1A'\n            ); /** 10% */\n          }\n        }\n\n        let infoColor: string;\n        let fadedInfoColor: string;\n        let fadedTwiceInfoColor: string;\n        let tempInfoColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-info-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempInfoColor.match(colorRegExp)) {\n          console.error('Error parsing info color', tempInfoColor);\n          infoColor = '#086dd6';\n          fadedInfoColor = '#086dd666'; /** 40% */\n          fadedTwiceInfoColor = '#086dd633'; /** 20% */\n        } else {\n          infoColor = tempInfoColor;\n          /** You only need to test for one */\n          if (!tempInfoColor.concat('66').match(colorRegExp)) {\n            fadedInfoColor = '#086dd666';\n            fadedTwiceInfoColor = '#086dd633';\n          } else {\n            fadedInfoColor = tempInfoColor.concat('66'); // This is 40% opacity\n            fadedTwiceInfoColor = tempInfoColor.concat('33'); // This is 20% opacity\n          }\n        }\n\n        let shadowColor: string;\n        let tempShadowColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-shadow-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempShadowColor.match(colorRegExp)) {\n          console.error('Error parsing shadow color', tempShadowColor);\n          shadowColor = '#C8C8C8'; // Gray shadow\n        } else {\n          shadowColor = tempShadowColor;\n        }\n\n        let warningColor: string;\n        let tempWarningColor = getComputedStyle(document.documentElement)\n          .getPropertyValue('--sn-stylekit-warning-color')\n          .replace(whiteSpaceRegExp, '');\n        if (!tempWarningColor.match(colorRegExp)) {\n          console.error('Error parsing warning color', tempWarningColor);\n          warningColor = '#f6a200'; // Orange\n        } else {\n          warningColor = tempWarningColor;\n        }\n\n        let isDarkMode = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches;\n        monaco.editor.defineTheme('sn-theme', {\n          /** If sn-theme, then if not dark mode, use vs. Otherwise, use vs-dark (default) */\n          base: !isDarkMode ? 'vs' : 'vs-dark',\n          inherit: true,\n          rules: [\n            {\n              token: '',\n              background: backgroundColor,\n              foreground: foregroundColor,\n            },\n          ],\n          colors: {\n            /** Ordered in mostly alphabetical order */\n            //foreground: foregroundColor /* Overall foreground color. This color is only used if not overridden by a component.\n\n            'button.background': backgroundColor, // Button background color.\n            'button.foreground': foregroundColor, // Button foreground color.\n            'button.hoverBackground': contrastBackgroundColor, // Button background color when hovering.\n\n            /** This is what you see when you right click */\n            'dropdown.background': contrastBackgroundColor, // Dropdown background.\n            'dropdown.border': borderColor, // Dropdown border.\n            'dropdown.foreground': foregroundColor, // Dropdown foreground.,\n\n            'editor.background': backgroundColor, //\n            'editor.foreground': foregroundColor, //\n            'editor.inactiveSelectionBackground': fadedTwiceInfoColor, // Color of the selection in an inactive editor.\n            'editor.lineHighlightBorder': fadedTwiceForegroundColor, // Background color for the border around the line at the cursor position.\n            'editor.selectionBackground': fadedInfoColor, // Color of the editor selection.\n\n            'editorCursor.foreground': fadedForegroundColor, //Color of the editor cursor.\n            'editorError.foreground': dangerColor, // Foreground color of error squigglies in the editor.\n\n            'editorLineNumber.foreground': fadedForegroundColor, // Color of editor line numbers.\n            'editorLink.activeForeground': infoColor, // Color of active links. Such as when you press ctrl when hovering over a link\n\n            'editorWidget.background': contrastBackgroundColor, // Background color of editor widgets, such as find/replace.\n            'editorWidget.border': borderColor, // Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.\n            'editorWarning.foreground': warningColor, // Foreground color of warning squigglies in the editor.\n\n            focusBorder: infoColor, // Overall border color for focused elements. This color is only used if not overridden by a component.\n\n            'input.background': backgroundColor, //,// Input box background.\n            'input.border': borderColor, // Input box border.\n            'input.foreground': foregroundColor, // Input box foreground.\n\n            'list.focusBackground': fadedInfoColor, // List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n            'list.focusForeground': foregroundColor, // List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n            'list.activeSelectionBackground': fadedInfoColor, // List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n            'list.activeSelectionForeground': foregroundColor, // List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n            'list.inactiveSelectionBackground': backgroundColor, // List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\n            'list.inactiveSelectionForeground': foregroundColor, // List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\n            'list.hoverBackground': backgroundColor, // List/Tree background when hovering over items using the mouse.\n            'list.hoverForeground': foregroundColor, // List/Tree foreground when hovering over items using the mouse.\n            'list.dropBackground': backgroundColor, // List/Tree drag and drop background when moving items around using the mouse.\n            'list.highlightForeground': foregroundColor, // List/Tree foreground color of the match highlights when searching inside the list/tree.\n\n            'textLink.activeForeground': infoColor, // Foreground color for active links in text. // Not sure where this is used.\n            'textLink.foreground': infoColor, // Foreground color for links in text (such as \"Follow Link\")\n\n            'widget.shadow': shadowColor, // Shadow color of widgets such as find/replace inside the editor.\n          },\n        });\n        monaco.editor.setTheme(theme);\n      };\n\n      if (theme === 'sn-theme') {\n        defineSnTheme();\n      }\n\n      editor = monaco.editor.create(divEl.current, {\n        // These are variable: customizable by user or dependent on props\n        fontFamily: 'var(--sn-stylekit-monospace-font)',\n        fontSize: parseInt(fontSize.replace('px', '')),\n        language: language,\n        minimap: {\n          enabled: minimap,\n        },\n        tabSize: tabSize,\n        theme: theme,\n        //@ts-ignore\n        wordWrap: wordWrap,\n\n        value: [text].join('\\n'),\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wrappingStrategy: 'advanced',\n      });\n\n      // Keyboard Events\n      editor.onKeyDown((e: monaco.IKeyboardEvent) => {\n        if (e.ctrlKey && e.code === 'KeyS') {\n          e.preventDefault();\n        } else if (e.shiftKey && e.altKey && e.code === 'KeyF') {\n          /** Format code */\n          e.preventDefault();\n          const previousPosition = lastPosition;\n          const formattedText = makePrettier(language, editor.getValue());\n          if (formattedText) {\n            editor.setValue(formattedText);\n          }\n          lastPosition = previousPosition;\n          if (lastPosition) {\n            editor.revealLineInCenterIfOutsideViewport(lastPosition.lineNumber);\n            editor.setPosition(lastPosition);\n          }\n        }\n        onKeyDownDebug(e.code, debugMode);\n        onKeyDown(e);\n      });\n\n      editor.onKeyUp((e: monaco.IKeyboardEvent) => {\n        onKeyUpDebug(e.code, debugMode);\n      });\n\n      // Content Change Events\n      editor.onDidChangeModelContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(editor.getValue());\n          }\n        }\n      );\n\n      editor.onDidChangeCursorPosition(\n        (e: monaco.editor.ICursorPositionChangedEvent) => {\n          let pos = editor.getPosition();\n          if (pos) {\n            lastPosition = pos;\n          }\n        }\n      );\n\n      editor.onDidFocusEditorWidget(() => {\n        wasEditorFocused = true;\n\n        /** If the theme has changed or dark mode has changed, redefine the sn-theme */\n        let currentBackgroundColor = getComputedStyle(\n          document.documentElement\n        ).getPropertyValue('--sn-stylekit-background-color');\n        let isDarkMode = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches;\n        if (\n          lastBackgroundColor !== currentBackgroundColor ||\n          lastDarkMode !== isDarkMode\n        ) {\n          lastBackgroundColor = currentBackgroundColor;\n          lastDarkMode = isDarkMode;\n          defineSnTheme();\n        }\n      });\n\n      editor.onDidBlurEditorWidget(() => {\n        wasEditorFocused = false;\n      });\n\n      if (lastPosition) {\n        editor.revealLineInCenterIfOutsideViewport(lastPosition.lineNumber);\n        editor.setPosition(lastPosition);\n      }\n      /* If editor was previously focused, or is loaded the first time, focus again */\n      if (wasEditorFocused || refreshTokenEditor !== lastRefreshToken) {\n        lastRefreshToken = refreshTokenEditor;\n        editor.focus();\n      }\n    }\n    return () => {\n      editor.dispose();\n    };\n    /** Do not include text so useEffect doesn't activate on each edit\n     * A change in these things will cause a refresh of the editor.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    fontSize,\n    language,\n    minimap,\n    refreshTokenEditor,\n    tabSize,\n    theme,\n    wordWrap,\n  ]);\n  return (\n    <div\n      id={id}\n      className={HtmlClassName.MonacoEditorContainer + ' ' + theme}\n      ref={divEl}\n    ></div>\n  );\n};\n\n/** For the Diff Editor Feature */\ninterface MonacoDiffEditorTypes extends MonacoEditorTypes {\n  modifiedText: string;\n}\n\nexport const MonacoDiffEditor: React.FC<MonacoDiffEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoDiffEditorContainerID,\n  language = 'markdown',\n  saveText,\n  text,\n  modifiedText,\n  theme = 'vs-dark',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      const originalModel = monaco.editor.createModel(\n        [text].join('\\n'),\n        language\n      );\n      const modifiedModel = monaco.editor.createModel(\n        [modifiedText].join('\\n'),\n        language\n      );\n\n      diffEditor = monaco.editor.createDiffEditor(divEl.current, {\n        // Same settings as above\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        theme: theme,\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n\n        // Specific to Diff Editor\n        originalEditable: true, // for left panel\n        readOnly: true, // for right panel\n      });\n      diffEditor.setModel({\n        original: originalModel,\n        modified: modifiedModel,\n      });\n\n      // Content Change Events\n      originalModel.onDidChangeContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(originalModel.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      diffEditor.dispose();\n    };\n    /** Do not include text so the editor doesn't refresh on each edit */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fontSize, language, modifiedText, theme]);\n  return (\n    <div id={id} className={MonacoDiffEditorContainerID} ref={divEl}></div>\n  );\n};\n\ninterface ViewProps {\n  language: string;\n  refreshTokenView: boolean;\n  text: string;\n}\n\nlet lastLanguage: string;\nexport const View: React.FC<ViewProps> = ({\n  language,\n  refreshTokenView, // used to manually refresh the markdown\n  text,\n}) => {\n  const [markdown, updateMarkdown] = useState(\n    renderMarkdown(getCodeText(language, text))\n  );\n  useEffect(() => {\n    if (lastLanguage !== language) {\n      lastLanguage = language;\n      renderMarkdown.cancel();\n      renderMarkdown(getCodeText(language, text));\n      renderMarkdown.flush();\n    }\n    updateMarkdown(renderMarkdown(getCodeText(language, text)));\n  }, [language, text, refreshTokenView]);\n  return <div id={HtmlElementId.viewContainer}>{markdown}</div>;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst infoColor = 'var(--sn-stylekit-info-color)';\nconst foregroundColor = 'var(--sn-stylekit-foreground-color)';\n\ninterface Icons {\n  condition?: boolean;\n  fill?: string;\n  role: string;\n}\n\nexport const ChevronIconDown: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon down\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const ChevronIconRight: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon right\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.90918 14.0667L10.7342 10.2417L6.90918 6.4167L8.09251 5.2417L13.0925 10.2417L8.09251 15.2417L6.90918 14.0667Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const EyeIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"eye icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99992 7.5C9.33688 7.5 8.70099 7.76339 8.23215 8.23223C7.76331 8.70107 7.49992 9.33696 7.49992 10C7.49992 10.663 7.76331 11.2989 8.23215 11.7678C8.70099 12.2366 9.33688 12.5 9.99992 12.5C10.663 12.5 11.2988 12.2366 11.7677 11.7678C12.2365 11.2989 12.4999 10.663 12.4999 10C12.4999 9.33696 12.2365 8.70107 11.7677 8.23223C11.2988 7.76339 10.663 7.5 9.99992 7.5ZM9.99992 14.1667C8.89485 14.1667 7.83504 13.7277 7.05364 12.9463C6.27224 12.1649 5.83325 11.1051 5.83325 10C5.83325 8.89493 6.27224 7.83512 7.05364 7.05372C7.83504 6.27232 8.89485 5.83333 9.99992 5.83333C11.105 5.83333 12.1648 6.27232 12.9462 7.05372C13.7276 7.83512 14.1666 8.89493 14.1666 10C14.1666 11.1051 13.7276 12.1649 12.9462 12.9463C12.1648 13.7277 11.105 14.1667 9.99992 14.1667ZM9.99992 3.75C5.83325 3.75 2.27492 6.34167 0.833252 10C2.27492 13.6583 5.83325 16.25 9.99992 16.25C14.1666 16.25 17.7249 13.6583 19.1666 10C17.7249 6.34167 14.1666 3.75 9.99992 3.75Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const GearIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"gear icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.0001 6.66675C10.8842 6.66675 11.732 7.01794 12.3571 7.64306C12.9823 8.26818 13.3334 9.11603 13.3334 10.0001C13.3334 10.8841 12.9823 11.732 12.3571 12.3571C11.732 12.9822 10.8842 13.3334 10.0001 13.3334C9.11606 13.3334 8.26821 12.9822 7.64309 12.3571C7.01797 11.732 6.66678 10.8841 6.66678 10.0001C6.66678 9.11603 7.01797 8.26818 7.64309 7.64306C8.26821 7.01794 9.11606 6.66675 10.0001 6.66675ZM10.0001 8.33342C9.55808 8.33342 9.13416 8.50901 8.8216 8.82157C8.50904 9.13413 8.33344 9.55805 8.33344 10.0001C8.33344 10.4421 8.50904 10.866 8.8216 11.1786C9.13416 11.4912 9.55808 11.6667 10.0001 11.6667C10.4421 11.6667 10.8661 11.4912 11.1786 11.1786C11.4912 10.866 11.6668 10.4421 11.6668 10.0001C11.6668 9.55805 11.4912 9.13413 11.1786 8.82157C10.8661 8.50901 10.4421 8.33342 10.0001 8.33342ZM8.33344 18.3334C8.12511 18.3334 7.95011 18.1834 7.91678 17.9834L7.60844 15.7751C7.08344 15.5667 6.63344 15.2834 6.20011 14.9501L4.12511 15.7917C3.94178 15.8584 3.71678 15.7917 3.61678 15.6084L1.95011 12.7251C1.84178 12.5417 1.89178 12.3167 2.05011 12.1917L3.80844 10.8084L3.75011 10.0001L3.80844 9.16675L2.05011 7.80841C1.89178 7.68341 1.84178 7.45841 1.95011 7.27508L3.61678 4.39175C3.71678 4.20841 3.94178 4.13341 4.12511 4.20842L6.20011 5.04175C6.63344 4.71675 7.08344 4.43341 7.60844 4.22508L7.91678 2.01675C7.95011 1.81675 8.12511 1.66675 8.33344 1.66675H11.6668C11.8751 1.66675 12.0501 1.81675 12.0834 2.01675L12.3918 4.22508C12.9168 4.43341 13.3668 4.71675 13.8001 5.04175L15.8751 4.20842C16.0584 4.13341 16.2834 4.20841 16.3834 4.39175L18.0501 7.27508C18.1584 7.45841 18.1084 7.68341 17.9501 7.80841L16.1918 9.16675L16.2501 10.0001L16.1918 10.8334L17.9501 12.1917C18.1084 12.3167 18.1584 12.5417 18.0501 12.7251L16.3834 15.6084C16.2834 15.7917 16.0584 15.8667 15.8751 15.7917L13.8001 14.9584C13.3668 15.2834 12.9168 15.5667 12.3918 15.7751L12.0834 17.9834C12.0501 18.1834 11.8751 18.3334 11.6668 18.3334H8.33344ZM9.37511 3.33341L9.06678 5.50841C8.06678 5.71675 7.18344 6.25008 6.54178 6.99175L4.53344 6.12508L3.90844 7.20841L5.66678 8.50008C5.33344 9.47508 5.33344 10.5334 5.66678 11.5001L3.90011 12.8001L4.52511 13.8834L6.55011 13.0167C7.19178 13.7501 8.06678 14.2834 9.05844 14.4834L9.36678 16.6667H10.6334L10.9418 14.4917C11.9334 14.2834 12.8084 13.7501 13.4501 13.0167L15.4751 13.8834L16.1001 12.8001L14.3334 11.5084C14.6668 10.5334 14.6668 9.47508 14.3334 8.50008L16.0918 7.20841L15.4668 6.12508L13.4584 6.99175C12.8168 6.25008 11.9334 5.71675 10.9334 5.51675L10.6251 3.33341H9.37511Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const PencilIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"pencil icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M11.7167 7.5L12.5 8.28333L4.93333 15.8333H4.16667V15.0667L11.7167 7.5ZM14.7167 2.5C14.5083 2.5 14.2917 2.58333 14.1333 2.74167L12.6083 4.26667L15.7333 7.39167L17.2583 5.86667C17.5833 5.54167 17.5833 5 17.2583 4.69167L15.3083 2.74167C15.1417 2.575 14.9333 2.5 14.7167 2.5ZM11.7167 5.15833L2.5 14.375V17.5H5.625L14.8417 8.28333L11.7167 5.15833Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const RefreshIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"refresh icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99992 14.9999C8.67384 14.9999 7.40207 14.4731 6.46438 13.5355C5.5267 12.5978 4.99992 11.326 4.99992 9.99992C4.99992 9.16658 5.20825 8.35825 5.58325 7.66658L4.36659 6.44992C3.71659 7.47492 3.33325 8.69158 3.33325 9.99992C3.33325 11.768 4.03563 13.4637 5.28587 14.714C6.53612 15.9642 8.23181 16.6666 9.99992 16.6666V19.1666L13.3333 15.8332L9.99992 12.4999V14.9999ZM9.99992 3.33325V0.833252L6.66658 4.16658L9.99992 7.49992V4.99992C11.326 4.99992 12.5978 5.5267 13.5355 6.46438C14.4731 7.40207 14.9999 8.67383 14.9999 9.99992C14.9999 10.8333 14.7916 11.6416 14.4166 12.3333L15.6333 13.5499C16.2833 12.5249 16.6666 11.3083 16.6666 9.99992C16.6666 8.23181 15.9642 6.53612 14.714 5.28587C13.4637 4.03563 11.768 3.33325 9.99992 3.33325Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const SaveIcon: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"save-icon\">\n    <svg\n      aria-label=\"save icon\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M14.1667 2.5H4.16667C3.24167 2.5 2.5 3.25 2.5 4.16667V15.8333C2.5 16.75 3.24167 17.5 4.16667 17.5H15.8333C16.75 17.5 17.5 16.75 17.5 15.8333V5.83333L14.1667 2.5ZM15.8333 15.8333H4.16667V4.16667H13.475L15.8333 6.525V15.8333ZM10 10C8.61667 10 7.5 11.1167 7.5 12.5C7.5 13.8833 8.61667 15 10 15C11.3833 15 12.5 13.8833 12.5 12.5C12.5 11.1167 11.3833 10 10 10ZM5 5H12.5V8.33333H5V5Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const UndoIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"undo icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const WindowIcon: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"window-icon\">\n    <svg\n      aria-label=\"window icon\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M3.33333 3.33333H16.6667V16.6667H3.33333V3.33333ZM5 6.66666V15H15V6.66666H5Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n","import React from 'react';\nimport {\n  ChevronIconDown,\n  ChevronIconRight,\n  EyeIcon,\n  PencilIcon,\n  RefreshIcon,\n  SaveIcon,\n  WindowIcon,\n} from './Icons';\n\nimport { HtmlElementId, SettingsInterface } from './Editor';\n\ninterface SettingsProps extends SettingsInterface {\n  debugMode: boolean;\n  editMode: boolean;\n  handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  loadDefaultSettings: (callback: () => void) => void;\n  refreshEditor: () => void;\n  saveSettings: () => void;\n  saveDefaultSettings: () => void;\n  showSettings: boolean;\n  toggleEditMode: () => void;\n  toggleShowSettings: () => void;\n  toggleViewMode: () => void;\n  viewMode: boolean;\n}\n\ninterface SettingsState {\n  [x: string]: string | number | boolean;\n}\n\nexport default class Settings extends React.Component<\n  SettingsProps,\n  SettingsState\n> {\n  constructor(props: SettingsProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onFocus = () => {\n    const settings = document.getElementById(HtmlElementId.settings);\n    if (settings) {\n      settings.classList.add('focused');\n    }\n  };\n\n  onBlur = () => {\n    const settings = document.getElementById(HtmlElementId.settings);\n    if (settings) {\n      settings.classList.remove('focused');\n    }\n  };\n\n  loadDefaultSettings = () => {\n    const callback = () => {\n      /** Save settings after loading the default settings */\n      this.props.saveSettings();\n    };\n    this.props.loadDefaultSettings(callback);\n  };\n\n  render() {\n    return (\n      <div\n        id={HtmlElementId.settings}\n        className={this.props.showSettings ? 'show ' : 'hide '}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n      >\n        <section className=\"settings\">\n          {!this.props.showSettings && (\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              id={HtmlElementId.settingsToggleButton}\n              onClick={this.props.toggleShowSettings}\n              title={'Show Settings'}\n            >\n              <ChevronIconRight role={'button'} />\n            </button>\n          )}\n          {this.props.showSettings && (\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              id={HtmlElementId.settingsToggleButton}\n              onClick={this.props.toggleShowSettings}\n              title={'Hide Settings'}\n            >\n              <ChevronIconDown role={'button'} />\n            </button>\n          )}\n        </section>\n        {this.props.showSettings && [\n          <section className=\"settings language\" key={HtmlElementId.language}>\n            <label\n              htmlFor={HtmlElementId.language}\n              title={'Programming language. Default is Markdown'}\n            >\n              Language:&nbsp;\n            </label>\n            <div>\n              <select\n                id={HtmlElementId.language}\n                name={HtmlElementId.language}\n                onChange={this.props.handleSelectChange}\n                title={'Programming language. Default is Markdown'}\n                value={this.props.language}\n              >\n                <option>abap</option>\n                <option>aes</option>\n                <option>apex</option>\n                <option>azcli</option>\n                <option>bat</option>\n                <option>c</option>\n                <option>cameligo</option>\n                <option>clojure</option>\n                <option>coffeescript</option>\n                <option>cpp</option>\n                <option>csharp</option>\n                <option>csp</option>\n                <option>css</option>\n                <option>dart</option>\n                <option>dockerfile</option>\n                <option>fsharp</option>\n                <option>go</option>\n                <option>graphql</option>\n                <option>handlebars</option>\n                <option>hcl</option>\n                <option>html</option>\n                <option>ini</option>\n                <option>java</option>\n                <option>javascript</option>\n                <option>json</option>\n                <option>julia</option>\n                <option>kotlin</option>\n                <option>less</option>\n                <option>lexon</option>\n                <option>lua</option>\n                <option>markdown</option>\n                <option>mips</option>\n                <option>msdax</option>\n                <option>mysql</option>\n                <option>objective-c</option>\n                <option>pascal</option>\n                <option>pascaligo</option>\n                <option>perl</option>\n                <option>pgsql</option>\n                <option>php</option>\n                <option>plaintext</option>\n                <option>postiats</option>\n                <option>powerquery</option>\n                <option>powershell</option>\n                <option>pug</option>\n                <option>python</option>\n                <option>r</option>\n                <option>razor</option>\n                <option>redis</option>\n                <option>redshift</option>\n                <option>restructuredtext</option>\n                <option>ruby</option>\n                <option>rust</option>\n                <option>sb</option>\n                <option>scala</option>\n                <option>scheme</option>\n                <option>scss</option>\n                <option>shell</option>\n                <option>sol</option>\n                <option>sql</option>\n                <option>st</option>\n                <option>swift</option>\n                <option>systemverilog</option>\n                <option>tcl</option>\n                <option>twig</option>\n                <option>typescript</option>\n                <option>vb</option>\n                <option>verilog</option>\n                <option>xml</option>\n                <option>yaml</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\" key={HtmlElementId.fontSize}>\n            <label\n              htmlFor={HtmlElementId.fontSize}\n              title={'Font size in pixels. Default is 16px (12pt)'}\n            >\n              Font size:&nbsp;\n            </label>\n            <div className=\"settings-input\">\n              <select\n                id={HtmlElementId.fontSize}\n                name={HtmlElementId.fontSize}\n                onChange={this.props.handleSelectChange}\n                title={'Font size in pixels. Default is 16px (12pt)'}\n                value={this.props.fontSize}\n              >\n                <option>12px</option>\n                <option>13px</option>\n                <option>14px</option>\n                <option>15px</option>\n                <option>16px</option>\n                <option>17px</option>\n                <option>18px</option>\n                <option>19px</option>\n                <option>20px</option>\n                <option>21px</option>\n                <option>22px</option>\n                <option>23px</option>\n                <option>24px</option>\n                <option>25px</option>\n                <option>26px</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\" key={HtmlElementId.tabSize}>\n            <label\n              htmlFor={HtmlElementId.tabSize}\n              title={\n                'Number of spaces inserted when you press Tab. Default is 2'\n              }\n            >\n              Tab size:&nbsp;\n            </label>\n            <div className=\"settings-input\">\n              <select\n                id={HtmlElementId.tabSize}\n                name={HtmlElementId.tabSize}\n                onChange={this.props.handleSelectChange}\n                title={\n                  'Number of spaces inserted when you press Tab. Default is 2'\n                }\n                value={this.props.tabSize}\n              >\n                <option>2</option>\n                <option>4</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\" key={HtmlElementId.minimap}>\n            <label\n              htmlFor={HtmlElementId.minimap}\n              title={'Toggle show minimap. Default is on (checked)'}\n            >\n              Minimap:&nbsp;\n            </label>\n            <div className=\"settings-input\">\n              <label className={'checkbox-input-label'}>\n                <input\n                  checked={this.props.minimap}\n                  id={HtmlElementId.minimap}\n                  name={HtmlElementId.minimap}\n                  title={'Toggle show minimap. Default is on (checked)'}\n                  type=\"checkbox\"\n                  onChange={this.props.handleInputChange}\n                />\n              </label>\n            </div>\n          </section>,\n          <section className=\"settings\" key={HtmlElementId.theme}>\n            <label\n              htmlFor={HtmlElementId.theme}\n              title={'Theme for your code editor. Default is sn-theme'}\n            >\n              Theme:&nbsp;\n            </label>\n            <div className=\"settings-input\">\n              <select\n                id={HtmlElementId.theme}\n                name={HtmlElementId.theme}\n                onChange={this.props.handleSelectChange}\n                title={'Theme for your code editor. Default is sn-theme'}\n                value={this.props.theme}\n              >\n                <option>vs</option>\n                <option>vs-dark</option>\n                <option>hc-black</option>\n                <option>sn-theme</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\" key={HtmlElementId.wordWrap}>\n            <label\n              htmlFor={HtmlElementId.wordWrap}\n              title={'Option to wrap long lines of text. Default is on'}\n            >\n              Word wrap:&nbsp;\n            </label>\n            <div className=\"settings-input\">\n              <select\n                id={HtmlElementId.wordWrap}\n                name={HtmlElementId.wordWrap}\n                onChange={this.props.handleSelectChange}\n                title={'Option to wrap long lines of text. Default is on'}\n                value={this.props.wordWrap}\n              >\n                <option>on</option>\n                <option>off</option>\n                <option>bounded</option>\n              </select>\n            </div>\n          </section>,\n        ]}\n        <section className=\"settings buttons\">\n          {this.props.showSettings && [\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              key={HtmlElementId.buttonSaveSettings}\n              id={HtmlElementId.buttonSaveSettings}\n              onClick={this.props.saveDefaultSettings}\n              title=\"Save current settings as your personal default\"\n            >\n              <SaveIcon role={'button'} />\n            </button>,\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              key={HtmlElementId.buttonLoadSettings}\n              id={HtmlElementId.buttonLoadSettings}\n              onClick={this.loadDefaultSettings}\n              title=\"Load your personal default settings\"\n            >\n              <RefreshIcon role={'button'} />\n            </button>,\n          ]}\n          <button\n            className={'sk-button button sk-secondary-contrast'}\n            key={HtmlElementId.buttonRefreshEditor}\n            id={HtmlElementId.buttonRefreshEditor}\n            onClick={this.props.refreshEditor}\n            title=\"Refresh and resize the editor\"\n          >\n            <WindowIcon role={'button'} />\n          </button>\n          <button\n            className={'sk-button button sk-secondary-contrast'}\n            key={HtmlElementId.buttonToggleEditMode}\n            id={HtmlElementId.buttonToggleEditMode}\n            onClick={this.props.toggleEditMode}\n            title=\"Toggle Edit Mode\"\n          >\n            <PencilIcon condition={this.props.editMode} role={'button'} />\n          </button>\n          <button\n            className={'sk-button button sk-secondary-contrast'}\n            key={HtmlElementId.buttonToggleViewMode}\n            id={HtmlElementId.buttonToggleViewMode}\n            onClick={this.props.toggleViewMode}\n            title=\"Toggle View Mode\"\n          >\n            <EyeIcon condition={this.props.viewMode} role={'button'} />\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remark2rehype from 'remark-rehype';\nimport rehype2react from 'rehype-react';\nimport { debounce } from 'lodash';\n\n// Remark\nconst breaks = require('remark-breaks');\nconst externalLinks = require('remark-external-links');\nconst footnotes = require('remark-footnotes');\nconst gfm = require('remark-gfm');\nconst gemoji = require('remark-gemoji');\nconst math = require('remark-math');\nconst slug = require('remark-slug');\nconst toc = require('remark-toc');\n\n// Rehype\nconst highlight = require('rehype-highlight');\nconst rehypeKatex = require('rehype-katex');\nconst raw = require('rehype-raw');\n\nconst processor = unified()\n  .use(parse)\n  .use(gfm)\n  .use(breaks)\n  .use(slug)\n  .use(toc, { maxDepth: 6 })\n  .use(externalLinks)\n  .use(footnotes, { inlineNotes: true })\n  .use(gemoji)\n  .use(remark2rehype, { allowDangerousHtml: true })\n  .use(raw)\n  .use(math)\n  .use(rehypeKatex)\n  .use(highlight, { ignoreMissing: true })\n  .use(rehype2react, { createElement: React.createElement });\n\nexport const processMarkdown = (text: string) => {\n  //console.log('processedMarkdown');\n  const markdown = processor.processSync(text).result as ReactNode;\n  return markdown;\n};\n\n/** Debounce the rendering of markdown to prevent lag\n * when rendering long notes or lots of Markdown or KaTeX */\nexport const renderMarkdown = debounce((text: string): React.ReactNode => {\n  //console.log('renderMarkdown', text.substring(0, 10));\n  const markdown = processMarkdown(text);\n  return markdown;\n}, 500);\n\nexport const getCodeText = (language: string, text: string): string => {\n  if (language !== 'markdown' && language !== 'html' && text) {\n    return '```' + language + '\\n' + text + '\\n```';\n  } else {\n    return text;\n  }\n};\n","import React, { ErrorInfo } from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Learn more about Error Boundaries here:\n * https://reactjs.org/docs/error-boundaries.html\n */\n\nexport default class ErrorBoundary extends React.Component<\n  any,\n  ErrorBoundaryState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.error('Error:', error, '\\nError Info:', errorInfo);\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className=\"error-boundary\">\n          <h1>Something went wrong.</h1>\n          <p>\n            Error Name: <code>{this.state.error?.name}</code>\n          </p>\n          <p>\n            Error Message: <code>{this.state.error?.message}</code>\n          </p>\n          <p>\n            Error Info: <code>{this.state.errorInfo}</code>\n          </p>\n          <p>Please see the developer console for details.</p>\n          <hr></hr>\n          <p>\n            If the error persists and is not related to the content of your\n            note, then please{' '}\n            <a\n              href=\"https://github.com/standardnotes/code-pro/issues/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              report the issue on GitHub\n            </a>{' '}\n            and we will try to fix it.\n          </p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","/** Prettier */\nimport prettier from 'prettier';\nimport parserBabel from 'prettier/parser-babel';\nimport parserCss from 'prettier/parser-postcss';\nimport parserGraphql from 'prettier/parser-graphql';\nimport parserHtml from 'prettier/parser-html';\nimport parserMarkdown from 'prettier/parser-markdown';\nimport parserTypescript from 'prettier/parser-typescript';\nimport parserYaml from 'prettier/parser-yaml';\n\n/** Make Prettier */\nexport const makePrettier = (language: string, text: string) => {\n  try {\n    if (language === 'css') {\n      const formattedText = prettier.format(text, {\n        parser: 'css',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'graphql') {\n      const formattedText = prettier.format(text, {\n        parser: 'graphql',\n        plugins: [parserGraphql],\n      });\n      return formattedText;\n    } else if (language === 'markdown') {\n      const formattedText = prettier.format(text, {\n        parser: 'markdown',\n        plugins: [parserMarkdown],\n      });\n      return formattedText;\n    } else if (language === 'html') {\n      const formattedText = prettier.format(text, {\n        parser: 'html',\n        plugins: [parserHtml],\n      });\n      return formattedText;\n    } else if (language === 'javascript') {\n      const formattedText = prettier.format(text, {\n        parser: 'babel',\n        plugins: [parserBabel],\n      });\n      return formattedText;\n    } else if (language === 'less') {\n      const formattedText = prettier.format(text, {\n        parser: 'less',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'typescript') {\n      const formattedText = prettier.format(text, {\n        parser: 'typescript',\n        plugins: [parserTypescript],\n      });\n      return formattedText;\n    } else if (language === 'scss') {\n      const formattedText = prettier.format(text, {\n        parser: 'scss',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'yaml') {\n      const formattedText = prettier.format(text, {\n        parser: 'yaml',\n        plugins: [parserYaml],\n      });\n      return formattedText;\n    }\n  } catch (error) {\n    console.error('Error formatting code:', error);\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}