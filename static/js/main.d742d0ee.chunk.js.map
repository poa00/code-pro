{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","components/Icons.tsx","components/Settings.tsx","index.tsx"],"names":["HtmlClassName","HtmlElementId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","foregroundColor","ChevronIconDown","fill","role","className","aria-label","width","height","viewBox","xmlns","d","ChevronIconRight","RefreshIcon","SaveIcon","WindowIcon","Settings","props","handleInputChange","event","target","value","type","checked","name","setState","onFocus","settings","document","getElementById","classList","add","onBlur","remove","loadDefaultSettings","saveSettings","state","id","this","showSettings","settingsToggleButton","onClick","toggleShowSettings","htmlFor","language","onChange","handleSelectChange","fontSize","tabSize","theme","wordWrap","saveDefaultSettings","title","refreshEditor","React","Component","lastPosition","initialState","text","debugMode","keyMap","Map","Editor","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","loadSettings","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","componentDidMount","setTimeout","undefined","internal","note","showEditor","componentManager","saveItemWithPresave","content","codeEditorSettings","JSON","stringify","error","console","streamContextItem","loadedSettings","parse","saveEditorOption","optionKey","optionValue","setComponentDataValueForKey","defaultSettings","callback","settingsString","componentDataValueForKey","platform","log","saveText","saveNote","onEditorValueChanged","toggleSettingsButton","focus","e","onKeyDown","ctrlKey","code","preventDefault","altKey","onKeyUp","delete","key","snComponent","tabIndex","MonacoEditorContainerParentDiv","self","MonacoEnvironment","getWorkerUrl","_moduleId","label","MonacoEditor","editor","MonacoEditorContainer","divEl","useRef","useEffect","current","monaco","create","parseInt","replace","join","autoClosingOvertype","formatOnPaste","formatOnType","wrappingStrategy","shiftKey","previousPosition","formattedText","formatCode","getValue","setValue","revealLineInCenterIfOutsideViewport","lineNumber","setPosition","onDidChangeModelContent","onDidChangeCursorPosition","pos","getPosition","dispose","ref","prettier","format","parser","plugins","parserCss","parserGraphql","parserMarkdown","parserHtml","parserBabel","parserTypescript","parserYaml","ReactDOM","render","StrictMode"],"mappings":"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A,4CACA,yCACA,yCACA,0CACA,gDACA,4CACA,wCACA,6CACA,gDACA,yCACA,0CACA,yCACA,0CACA,gDACA,0CACA,2CACA,4CACA,0CACA,2CACA,yCACA,8CACA,0CACA,2CACA,2CACA,iDACA,4CACA,+CACA,0CACA,2CACA,yCACA,+CACA,8CACA,gDACA,gDACA,yCACA,4CACA,uCACA,2CACA,2CACA,8CACA,sDACA,0CACA,0CACA,wCACA,2CACA,4CACA,0CACA,2CACA,yCACA,yCACA,wCACA,2CACA,mDACA,yCACA,0CACA,gDACA,wCACA,6CACA,yCACA,oDAKR,0BAASzC,UAAU,WAAnB,UACE,uBAAOsC,QAASpD,EAAcwD,SAA9B,4BACA,qBAAK1C,UAAU,wBAAf,SACE,yBACEgC,GAAI9C,EAAcwD,SAClBvB,KAAMjC,EAAcwD,SACpB1B,MAAOiB,KAAKrB,MAAM8B,SAClBF,SAAUP,KAAKrB,MAAM6B,mBAJvB,UAME,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,kDAIN,0BAASzC,UAAU,WAAnB,UACE,uBAAOsC,QAASpD,EAAcyD,QAA9B,2BACA,qBAAK3C,UAAU,wBAAf,SACE,yBACEgC,GAAI9C,EAAcyD,QAClBxB,KAAMjC,EAAcyD,QACpB3B,MAAOiB,KAAKrB,MAAM+B,QAClBH,SAAUP,KAAKrB,MAAM6B,mBAJvB,UAME,uCACA,+CAIN,0BAASzC,UAAU,WAAnB,UACE,uBAAOsC,QAASpD,EAAc0D,MAA9B,wBACA,qBAAK5C,UAAU,wBAAf,SACE,yBACEgC,GAAI9C,EAAc0D,MAClBzB,KAAMjC,EAAc0D,MACpB5B,MAAOiB,KAAKrB,MAAMgC,MAClBJ,SAAUP,KAAKrB,MAAM6B,mBAJvB,UAME,wCACA,6CACA,8CACA,sDAIN,0BAASzC,UAAU,WAAnB,UACE,uBAAOsC,QAASpD,EAAc2D,SAA9B,4BACA,qBAAK7C,UAAU,wBAAf,SACE,yBACEgC,GAAI9C,EAAc2D,SAClB1B,KAAMjC,EAAc2D,SACp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","file":"static/js/main.d742d0ee.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef, useEffect } from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport * as monaco from 'monaco-editor';\n\n/** Prettier */\nimport prettier from 'prettier';\nimport parserMarkdown from 'prettier/parser-markdown';\n\nimport parserBabel from 'prettier/parser-babel';\nimport parserCss from 'prettier/parser-postcss';\nimport parserGraphql from 'prettier/parser-graphql';\nimport parserHtml from 'prettier/parser-html';\nimport parserTypescript from 'prettier/parser-typescript';\nimport parserYaml from 'prettier/parser-yaml';\n\n/** Components */\nimport Settings from './Settings';\n\nexport enum HtmlClassName {\n  MonacoEditorContainerParentDiv = 'MonacoEditorContainerParentDiv',\n  MonacoEditorContainer = 'MonacoEditorContainer',\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\n\nexport enum HtmlElementId {\n  fontSize = 'fontSize',\n  language = 'language',\n  tabSize = 'tabSize',\n  theme = 'theme',\n  wordWrap = 'wordWrap',\n  saveAsDefault = 'saveAsDefault',\n\n  MonacoEditorContainer = 'MonacoEditorContainer',\n  settings = 'settings',\n  settingsToggleButton = 'settingsToggleButton',\n  snComponent = 'sn-component',\n  textarea = 'textarea',\n}\n\nexport interface SettingsInterface {\n  fontSize: string;\n  language: string;\n  tabSize: number;\n  theme: string;\n  wordWrap: string;\n}\n\nexport interface EditorInterface extends SettingsInterface {\n  text: string;\n  platform?: string;\n  showEditor?: boolean;\n  showSettings: boolean;\n  /** this is used for handleSelectChange, but could mess with type checking */\n  [x: string]: string | number | boolean | undefined;\n}\n\nconst initialState = {\n  fontSize: '16px',\n  language: 'markdown',\n  showSettings: true,\n  tabSize: 2,\n  text: '',\n  theme: 'vs-dark',\n  wordWrap: 'on',\n};\n\nconst debugMode = false;\nlet keyMap = new Map();\nlet lastPosition: monaco.IPosition;\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            ...initialState,\n            text,\n          },\n          () => {\n            this.loadDefaultSettings(this.refreshEditor);\n            this.loadSettings();\n            /** This refreshes the editor */\n            this.refreshEditor();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  componentDidMount = () => {\n    setTimeout(() => {\n      const note = this.editorKit.internal.note;\n      /** This runs if there's no note */\n      if (note === undefined) {\n        this.setState({ showEditor: true });\n      }\n    }, 500);\n  };\n\n  saveSettings = () => {\n    try {\n      const note = this.editorKit.internal.note;\n      let settings: SettingsInterface;\n      settings = {\n        fontSize: this.state.fontSize,\n        language: this.state.language,\n        tabSize: this.state.tabSize,\n        theme: this.state.theme,\n        wordWrap: this.state.wordWrap,\n      };\n      this.editorKit.internal.componentManager.saveItemWithPresave(note, () => {\n        note.content.codeEditorSettings = JSON.stringify(settings);\n      });\n    } catch (error) {\n      console.error('Error saving settings', error);\n    }\n  };\n\n  loadSettings = () => {\n    this.editorKit.internal.componentManager.streamContextItem((note: any) => {\n      // Load editor settings\n      if (note.content.codeEditorSettings !== undefined) {\n        const loadedSettings = JSON.parse(\n          note.content.codeEditorSettings\n        ) as SettingsInterface;\n        if (debugMode) {\n          console.log('loadedSettings', loadedSettings);\n        }\n        this.setState(\n          {\n            fontSize: loadedSettings.fontSize,\n            language: loadedSettings.language,\n            tabSize: loadedSettings.tabSize,\n            theme: loadedSettings.theme,\n            wordWrap: loadedSettings.wordWrap,\n          },\n          () => {\n            this.refreshEditor();\n          }\n        );\n      }\n    });\n  };\n\n  saveEditorOption = (optionKey: string, optionValue: string) => {\n    try {\n      this.editorKit.internal.componentManager.setComponentDataValueForKey(\n        optionKey,\n        optionValue\n      );\n    } catch (error) {\n      console.error(\n        'Error saving editor option. Your optionKey:',\n        optionKey,\n        '\\n - Your optionValue: ',\n        optionValue,\n        '\\n - The error: ',\n        error\n      );\n    }\n  };\n\n  saveDefaultSettings = () => {\n    let defaultSettings: SettingsInterface;\n    defaultSettings = {\n      fontSize: this.state.fontSize,\n      language: this.state.language,\n      tabSize: this.state.tabSize,\n      theme: this.state.theme,\n      wordWrap: this.state.wordWrap,\n    };\n    this.saveEditorOption('defaultSettings', JSON.stringify(defaultSettings));\n  };\n\n  loadDefaultSettings = (callback: () => void) => {\n    try {\n      const settingsString = this.editorKit.internal.componentManager.componentDataValueForKey(\n        'defaultSettings'\n      );\n      if (settingsString !== undefined) {\n        const defaultSettings = JSON.parse(settingsString) as SettingsInterface;\n        if (debugMode) {\n          console.log('defaultSettings', defaultSettings);\n        }\n        this.setState(\n          {\n            fontSize: defaultSettings.fontSize,\n            language: defaultSettings.language,\n            tabSize: defaultSettings.tabSize,\n            theme: defaultSettings.theme,\n            wordWrap: defaultSettings.wordWrap,\n          },\n          () => {\n            if (callback) {\n              callback();\n            }\n          }\n        );\n      }\n      this.setState(\n        {\n          platform: this.editorKit.internal.componentManager.platform,\n        },\n        () => {\n          if (debugMode) {\n            console.log(this.state.platform);\n          }\n        }\n      );\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error loading editor options:', error);\n    }\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n    this.saveText(value);\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n        showEditor: false,\n      },\n      () => {\n        if (debugMode) {\n          console.log(\n            'Saved select. Name: ' +\n              event.target.name +\n              ' Value: ' +\n              event.target.value\n          );\n        }\n        this.setState({\n          showEditor: true,\n        });\n        this.saveSettings();\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState({\n      text: text,\n    });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.error('Error saving note:', error);\n    }\n  };\n\n  refreshEditor = () => {\n    this.setState(\n      {\n        showEditor: false,\n      },\n      () => {\n        this.setState({\n          showEditor: true,\n        });\n      }\n    );\n  };\n\n  toggleShowSettings = () => {\n    this.setState(\n      {\n        showSettings: !this.state.showSettings,\n      },\n      () => {\n        const toggleSettingsButton = document.getElementById(\n          HtmlElementId.settingsToggleButton\n        );\n        if (toggleSettingsButton) {\n          toggleSettingsButton.focus();\n        }\n      }\n    );\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  // Keyboard Events\n  onKeyDown = (e: monaco.IKeyboardEvent) => {\n    // Do nothing if 'Control' and 's' are pressed\n    if (e.ctrlKey && e.code === 'KeyS') {\n      e.preventDefault();\n    } else if (e.altKey && e.code === 'KeyZ') {\n      /** Toggle word wrap with Alt + Z */\n      if (this.state.wordWrap === 'on') {\n        this.setState(\n          {\n            wordWrap: 'off',\n          },\n          () => {\n            this.refreshEditor();\n          }\n        );\n      } else if (this.state.wordWrap === 'off') {\n        this.setState(\n          {\n            wordWrap: 'on',\n          },\n          () => {\n            this.refreshEditor();\n          }\n        );\n      }\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  render() {\n    return (\n      <div\n        className={HtmlElementId.snComponent + ' '}\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        {this.state.showEditor && (\n          <div className={HtmlClassName.MonacoEditorContainerParentDiv}>\n            <MonacoEditor\n              fontSize={this.state.fontSize}\n              language={this.state.language}\n              onKeyDown={this.onKeyDown}\n              saveText={this.saveText}\n              tabSize={this.state.tabSize}\n              text={this.state.text}\n              theme={this.state.theme}\n              wordWrap={this.state.wordWrap}\n            />\n          </div>\n        )}\n        <Settings\n          debugMode={debugMode}\n          fontSize={this.state.fontSize}\n          handleSelectChange={this.handleSelectChange}\n          language={this.state.language}\n          loadDefaultSettings={this.loadDefaultSettings}\n          refreshEditor={this.refreshEditor}\n          saveSettings={this.saveSettings}\n          saveDefaultSettings={this.saveDefaultSettings}\n          showSettings={this.state.showSettings}\n          tabSize={this.state.tabSize}\n          theme={this.state.theme}\n          toggleShowSettings={this.toggleShowSettings}\n          wordWrap={this.state.wordWrap}\n        />\n      </div>\n    );\n  }\n}\n\nconst MonacoDiffEditorContainerID = 'MonacoDiffEditorContainer';\n\n/*eslint no-restricted-globals: [\"error\", \"event\", \"monaco\"]*/\n// @ts-ignore\nself.MonacoEnvironment = {\n  getWorkerUrl: function (_moduleId: any, label: string) {\n    if (label === 'json') {\n      return './monaco/json.worker.bundle.js';\n    }\n    if (label === 'css' || label === 'scss' || label === 'less') {\n      return './monaco/css.worker.bundle.js';\n    }\n    if (label === 'html' || label === 'handlebars' || label === 'razor') {\n      return './monaco/html.worker.bundle.js';\n    }\n    if (label === 'typescript' || label === 'javascript') {\n      return './monaco/ts.worker.bundle.js';\n    }\n    return './monaco/editor.worker.bundle.js';\n  },\n};\n\nconst onKeyDownDebug = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    //console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\nconst onKeyUpDebug = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    //console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\ninterface MonacoEditorTypes {\n  fontSize: string;\n  id?: string;\n  language: string;\n  onKeyDown: Function;\n  onKeyUp?: Function;\n  saveText: Function;\n  tabSize: number;\n  text: string;\n  theme: string;\n  wordWrap: string;\n}\n\nexport const MonacoEditor: React.FC<MonacoEditorTypes> = ({\n  fontSize = '16px',\n  id = HtmlClassName.MonacoEditorContainer,\n  language = 'javascript',\n  onKeyDown,\n  saveText,\n  tabSize = 2,\n  text,\n  theme = 'vs-dark',\n  wordWrap = 'on',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let editor: monaco.editor.IStandaloneCodeEditor;\n  useEffect(() => {\n    if (divEl.current) {\n      //let darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      editor = monaco.editor.create(divEl.current, {\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        language: language,\n        tabSize: tabSize,\n        /** if sn-theme, then if not dark mode, use vs. otherwise use vs-dark (default) */\n        theme: theme === 'sn-theme' ? 'vs-dark' : theme,\n        //@ts-ignore\n        wordWrap: wordWrap,\n\n        value: [text].join('\\n'),\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wrappingStrategy: 'advanced',\n      });\n\n      // Keyboard Events\n      editor.onKeyDown((e: monaco.IKeyboardEvent) => {\n        if (e.ctrlKey && e.code === 'KeyS') {\n          e.preventDefault();\n        } else if (e.shiftKey && e.altKey && e.code === 'KeyF') {\n          /** Format code */\n          e.preventDefault();\n          const previousPosition = lastPosition;\n          const formattedText = formatCode(language, editor.getValue());\n          if (formattedText) {\n            editor.setValue(formattedText);\n          }\n          lastPosition = previousPosition;\n          if (lastPosition) {\n            editor.revealLineInCenterIfOutsideViewport(lastPosition.lineNumber);\n            editor.setPosition(lastPosition);\n          }\n        }\n        onKeyDownDebug(e.code, debugMode);\n        onKeyDown(e);\n      });\n\n      editor.onKeyUp((e: monaco.IKeyboardEvent) => {\n        onKeyUpDebug(e.code, debugMode);\n      });\n\n      // Content Change Events\n      editor.onDidChangeModelContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(editor.getValue());\n          }\n        }\n      );\n\n      editor.onDidChangeCursorPosition(\n        (e: monaco.editor.ICursorPositionChangedEvent) => {\n          let pos = editor.getPosition();\n          if (pos) {\n            lastPosition = pos;\n          }\n        }\n      );\n      if (lastPosition) {\n        editor.revealLineInCenterIfOutsideViewport(lastPosition.lineNumber);\n        editor.setPosition(lastPosition);\n      }\n      editor.focus();\n    }\n    return () => {\n      editor.dispose();\n    };\n  }, []);\n  return (\n    <div\n      id={id}\n      className={HtmlClassName.MonacoEditorContainer + ' ' + theme}\n      ref={divEl}\n    ></div>\n  );\n};\n\n/** Format code */\nexport const formatCode = (language: string, text: string) => {\n  try {\n    if (language === 'css') {\n      const formattedText = prettier.format(text, {\n        parser: 'css',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'graphql') {\n      const formattedText = prettier.format(text, {\n        parser: 'graphql',\n        plugins: [parserGraphql],\n      });\n      return formattedText;\n    } else if (language === 'markdown') {\n      const formattedText = prettier.format(text, {\n        parser: 'markdown',\n        plugins: [parserMarkdown],\n      });\n      return formattedText;\n    } else if (language === 'html') {\n      const formattedText = prettier.format(text, {\n        parser: 'html',\n        plugins: [parserHtml],\n      });\n      return formattedText;\n    } else if (language === 'javascript') {\n      const formattedText = prettier.format(text, {\n        parser: 'babel',\n        plugins: [parserBabel],\n      });\n      return formattedText;\n    } else if (language === 'less') {\n      const formattedText = prettier.format(text, {\n        parser: 'less',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'typescript') {\n      const formattedText = prettier.format(text, {\n        parser: 'typescript',\n        plugins: [parserTypescript],\n      });\n      return formattedText;\n    } else if (language === 'scss') {\n      const formattedText = prettier.format(text, {\n        parser: 'scss',\n        plugins: [parserCss],\n      });\n      return formattedText;\n    } else if (language === 'yaml') {\n      const formattedText = prettier.format(text, {\n        parser: 'yaml',\n        plugins: [parserYaml],\n      });\n      return formattedText;\n    }\n  } catch (error) {\n    console.error('Error formatting code:', error);\n  }\n};\n\n/** For the Diff Editor Feature */\ninterface MonacoDiffEditorTypes extends MonacoEditorTypes {\n  modifiedText: string;\n}\n\nexport const MonacoDiffEditor: React.FC<MonacoDiffEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoDiffEditorContainerID,\n  language = 'markdown',\n  saveText,\n  text,\n  modifiedText,\n  theme = 'vs-dark',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let diffEditor: monaco.editor.IStandaloneDiffEditor;\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      const originalModel = monaco.editor.createModel(\n        [text].join('\\n'),\n        language\n      );\n      const modifiedModel = monaco.editor.createModel(\n        [modifiedText].join('\\n'),\n        language\n      );\n\n      diffEditor = monaco.editor.createDiffEditor(divEl.current, {\n        // Same settings as above\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        theme: theme,\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n\n        // Specific to Diff Editor\n        originalEditable: true, // for left panel\n        readOnly: true, // for right panel\n      });\n      diffEditor.setModel({\n        original: originalModel,\n        modified: modifiedModel,\n      });\n\n      // Content Change Events\n      originalModel.onDidChangeContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(originalModel.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      diffEditor.dispose();\n    };\n  }, []);\n  return (\n    <div id={id} className={MonacoDiffEditorContainerID} ref={divEl}></div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst infoColor = 'var(--sn-stylekit-info-color)';\nconst foregroundColor = 'var(--sn-stylekit-foreground-color)';\n\ninterface Icons {\n  condition?: boolean;\n  fill?: string;\n  role: string;\n}\n\nexport const ChevronIconDown: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon down\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const ChevronIconRight: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon right\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.90918 14.0667L10.7342 10.2417L6.90918 6.4167L8.09251 5.2417L13.0925 10.2417L8.09251 15.2417L6.90918 14.0667Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const GearIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"gear icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.0001 6.66675C10.8842 6.66675 11.732 7.01794 12.3571 7.64306C12.9823 8.26818 13.3334 9.11603 13.3334 10.0001C13.3334 10.8841 12.9823 11.732 12.3571 12.3571C11.732 12.9822 10.8842 13.3334 10.0001 13.3334C9.11606 13.3334 8.26821 12.9822 7.64309 12.3571C7.01797 11.732 6.66678 10.8841 6.66678 10.0001C6.66678 9.11603 7.01797 8.26818 7.64309 7.64306C8.26821 7.01794 9.11606 6.66675 10.0001 6.66675ZM10.0001 8.33342C9.55808 8.33342 9.13416 8.50901 8.8216 8.82157C8.50904 9.13413 8.33344 9.55805 8.33344 10.0001C8.33344 10.4421 8.50904 10.866 8.8216 11.1786C9.13416 11.4912 9.55808 11.6667 10.0001 11.6667C10.4421 11.6667 10.8661 11.4912 11.1786 11.1786C11.4912 10.866 11.6668 10.4421 11.6668 10.0001C11.6668 9.55805 11.4912 9.13413 11.1786 8.82157C10.8661 8.50901 10.4421 8.33342 10.0001 8.33342ZM8.33344 18.3334C8.12511 18.3334 7.95011 18.1834 7.91678 17.9834L7.60844 15.7751C7.08344 15.5667 6.63344 15.2834 6.20011 14.9501L4.12511 15.7917C3.94178 15.8584 3.71678 15.7917 3.61678 15.6084L1.95011 12.7251C1.84178 12.5417 1.89178 12.3167 2.05011 12.1917L3.80844 10.8084L3.75011 10.0001L3.80844 9.16675L2.05011 7.80841C1.89178 7.68341 1.84178 7.45841 1.95011 7.27508L3.61678 4.39175C3.71678 4.20841 3.94178 4.13341 4.12511 4.20842L6.20011 5.04175C6.63344 4.71675 7.08344 4.43341 7.60844 4.22508L7.91678 2.01675C7.95011 1.81675 8.12511 1.66675 8.33344 1.66675H11.6668C11.8751 1.66675 12.0501 1.81675 12.0834 2.01675L12.3918 4.22508C12.9168 4.43341 13.3668 4.71675 13.8001 5.04175L15.8751 4.20842C16.0584 4.13341 16.2834 4.20841 16.3834 4.39175L18.0501 7.27508C18.1584 7.45841 18.1084 7.68341 17.9501 7.80841L16.1918 9.16675L16.2501 10.0001L16.1918 10.8334L17.9501 12.1917C18.1084 12.3167 18.1584 12.5417 18.0501 12.7251L16.3834 15.6084C16.2834 15.7917 16.0584 15.8667 15.8751 15.7917L13.8001 14.9584C13.3668 15.2834 12.9168 15.5667 12.3918 15.7751L12.0834 17.9834C12.0501 18.1834 11.8751 18.3334 11.6668 18.3334H8.33344ZM9.37511 3.33341L9.06678 5.50841C8.06678 5.71675 7.18344 6.25008 6.54178 6.99175L4.53344 6.12508L3.90844 7.20841L5.66678 8.50008C5.33344 9.47508 5.33344 10.5334 5.66678 11.5001L3.90011 12.8001L4.52511 13.8834L6.55011 13.0167C7.19178 13.7501 8.06678 14.2834 9.05844 14.4834L9.36678 16.6667H10.6334L10.9418 14.4917C11.9334 14.2834 12.8084 13.7501 13.4501 13.0167L15.4751 13.8834L16.1001 12.8001L14.3334 11.5084C14.6668 10.5334 14.6668 9.47508 14.3334 8.50008L16.0918 7.20841L15.4668 6.12508L13.4584 6.99175C12.8168 6.25008 11.9334 5.71675 10.9334 5.51675L10.6251 3.33341H9.37511Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const RefreshIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"refresh icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99992 14.9999C8.67384 14.9999 7.40207 14.4731 6.46438 13.5355C5.5267 12.5978 4.99992 11.326 4.99992 9.99992C4.99992 9.16658 5.20825 8.35825 5.58325 7.66658L4.36659 6.44992C3.71659 7.47492 3.33325 8.69158 3.33325 9.99992C3.33325 11.768 4.03563 13.4637 5.28587 14.714C6.53612 15.9642 8.23181 16.6666 9.99992 16.6666V19.1666L13.3333 15.8332L9.99992 12.4999V14.9999ZM9.99992 3.33325V0.833252L6.66658 4.16658L9.99992 7.49992V4.99992C11.326 4.99992 12.5978 5.5267 13.5355 6.46438C14.4731 7.40207 14.9999 8.67383 14.9999 9.99992C14.9999 10.8333 14.7916 11.6416 14.4166 12.3333L15.6333 13.5499C16.2833 12.5249 16.6666 11.3083 16.6666 9.99992C16.6666 8.23181 15.9642 6.53612 14.714 5.28587C13.4637 4.03563 11.768 3.33325 9.99992 3.33325Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const SaveIcon: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"save-icon\">\n    <svg\n      aria-label=\"save icon\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M14.1667 2.5H4.16667C3.24167 2.5 2.5 3.25 2.5 4.16667V15.8333C2.5 16.75 3.24167 17.5 4.16667 17.5H15.8333C16.75 17.5 17.5 16.75 17.5 15.8333V5.83333L14.1667 2.5ZM15.8333 15.8333H4.16667V4.16667H13.475L15.8333 6.525V15.8333ZM10 10C8.61667 10 7.5 11.1167 7.5 12.5C7.5 13.8833 8.61667 15 10 15C11.3833 15 12.5 13.8833 12.5 12.5C12.5 11.1167 11.3833 10 10 10ZM5 5H12.5V8.33333H5V5Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const UndoIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"undo icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const WindowIcon: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"window-icon\">\n    <svg\n      aria-label=\"window icon\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M3.33333 3.33333H16.6667V16.6667H3.33333V3.33333ZM5 6.66666V15H15V6.66666H5Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n","import React from 'react';\nimport {\n  ChevronIconDown,\n  ChevronIconRight,\n  RefreshIcon,\n  SaveIcon,\n  WindowIcon,\n} from './Icons';\n\nimport { HtmlElementId, SettingsInterface } from './Editor';\n\ninterface SettingsProps extends SettingsInterface {\n  debugMode: boolean;\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  loadDefaultSettings: (callback: () => void) => void;\n  refreshEditor: () => void;\n  saveSettings: () => void;\n  saveDefaultSettings: () => void;\n  showSettings: boolean;\n  toggleShowSettings: () => void;\n}\n\ninterface SettingsState {\n  [x: string]: string | number | boolean;\n}\n\nexport default class Settings extends React.Component<\n  SettingsProps,\n  SettingsState\n> {\n  constructor(props: SettingsProps) {\n    super(props);\n    this.state = {};\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  onFocus = () => {\n    const settings = document.getElementById(HtmlElementId.settings);\n    if (settings) {\n      settings.classList.add('focused');\n    }\n  };\n\n  onBlur = () => {\n    const settings = document.getElementById(HtmlElementId.settings);\n    if (settings) {\n      settings.classList.remove('focused');\n    }\n  };\n\n  loadDefaultSettings = () => {\n    this.props.loadDefaultSettings(this.props.saveSettings);\n  };\n\n  render() {\n    return (\n      <div\n        id={HtmlElementId.settings}\n        className={this.props.showSettings ? 'show ' : 'hide '}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n      >\n        <section className=\"settings\">\n          {!this.props.showSettings && (\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              id={HtmlElementId.settingsToggleButton}\n              onClick={this.props.toggleShowSettings}\n            >\n              <ChevronIconRight role={'button'} />\n            </button>\n          )}\n          {this.props.showSettings && (\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              id={HtmlElementId.settingsToggleButton}\n              onClick={this.props.toggleShowSettings}\n            >\n              <ChevronIconDown role={'button'} />\n            </button>\n          )}\n        </section>\n        {this.props.showSettings && [\n          <section className=\"settings language\">\n            <label htmlFor={HtmlElementId.language}>Language:&nbsp;</label>\n            <div>\n              <label>\n                <select\n                  id={HtmlElementId.language}\n                  name={HtmlElementId.language}\n                  value={this.props.language}\n                  onChange={this.props.handleSelectChange}\n                >\n                  <option>abap</option>\n                  <option>aes</option>\n                  <option>apex</option>\n                  <option>azcli</option>\n                  <option>bat</option>\n                  <option>c</option>\n                  <option>cameligo</option>\n                  <option>clojure</option>\n                  <option>coffeescript</option>\n                  <option>cpp</option>\n                  <option>csharp</option>\n                  <option>csp</option>\n                  <option>css</option>\n                  <option>dart</option>\n                  <option>dockerfile</option>\n                  <option>fsharp</option>\n                  <option>go</option>\n                  <option>graphql</option>\n                  <option>handlebars</option>\n                  <option>hcl</option>\n                  <option>html</option>\n                  <option>ini</option>\n                  <option>java</option>\n                  <option>javascript</option>\n                  <option>json</option>\n                  <option>julia</option>\n                  <option>kotlin</option>\n                  <option>less</option>\n                  <option>lexon</option>\n                  <option>lua</option>\n                  <option>markdown</option>\n                  <option>mips</option>\n                  <option>msdax</option>\n                  <option>mysql</option>\n                  <option>objective-c</option>\n                  <option>pascal</option>\n                  <option>pascaligo</option>\n                  <option>perl</option>\n                  <option>pgsql</option>\n                  <option>php</option>\n                  <option>plaintext</option>\n                  <option>postiats</option>\n                  <option>powerquery</option>\n                  <option>powershell</option>\n                  <option>pug</option>\n                  <option>python</option>\n                  <option>r</option>\n                  <option>razor</option>\n                  <option>redis</option>\n                  <option>redshift</option>\n                  <option>restructuredtext</option>\n                  <option>ruby</option>\n                  <option>rust</option>\n                  <option>sb</option>\n                  <option>scala</option>\n                  <option>scheme</option>\n                  <option>scss</option>\n                  <option>shell</option>\n                  <option>sol</option>\n                  <option>sql</option>\n                  <option>st</option>\n                  <option>swift</option>\n                  <option>systemverilog</option>\n                  <option>tcl</option>\n                  <option>twig</option>\n                  <option>typescript</option>\n                  <option>vb</option>\n                  <option>verilog</option>\n                  <option>xml</option>\n                  <option>yaml</option>\n                </select>\n              </label>\n            </div>\n          </section>,\n          <section className=\"settings\">\n            <label htmlFor={HtmlElementId.fontSize}>Font size:&nbsp;</label>\n            <div className=\"input-and-undo-button\">\n              <select\n                id={HtmlElementId.fontSize}\n                name={HtmlElementId.fontSize}\n                value={this.props.fontSize}\n                onChange={this.props.handleSelectChange}\n              >\n                <option>12px</option>\n                <option>13px</option>\n                <option>14px</option>\n                <option>15px</option>\n                <option>16px</option>\n                <option>17px</option>\n                <option>18px</option>\n                <option>19px</option>\n                <option>20px</option>\n                <option>21px</option>\n                <option>22px</option>\n                <option>23px</option>\n                <option>24px</option>\n                <option>25px</option>\n                <option>26px</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\">\n            <label htmlFor={HtmlElementId.tabSize}>Tab size:&nbsp;</label>\n            <div className=\"input-and-undo-button\">\n              <select\n                id={HtmlElementId.tabSize}\n                name={HtmlElementId.tabSize}\n                value={this.props.tabSize}\n                onChange={this.props.handleSelectChange}\n              >\n                <option>2</option>\n                <option>4</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\">\n            <label htmlFor={HtmlElementId.theme}>Theme:&nbsp;</label>\n            <div className=\"input-and-undo-button\">\n              <select\n                id={HtmlElementId.theme}\n                name={HtmlElementId.theme}\n                value={this.props.theme}\n                onChange={this.props.handleSelectChange}\n              >\n                <option>vs</option>\n                <option>vs-dark</option>\n                <option>hc-black</option>\n                <option>sn-theme</option>\n              </select>\n            </div>\n          </section>,\n          <section className=\"settings\">\n            <label htmlFor={HtmlElementId.wordWrap}>Word wrap:&nbsp;</label>\n            <div className=\"input-and-undo-button\">\n              <select\n                id={HtmlElementId.wordWrap}\n                name={HtmlElementId.wordWrap}\n                value={this.props.wordWrap}\n                onChange={this.props.handleSelectChange}\n              >\n                <option>on</option>\n                <option>off</option>\n                <option>bounded</option>\n              </select>\n            </div>\n          </section>,\n        ]}\n        <section className=\"settings buttons\">\n          {this.props.showSettings && [\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              onClick={this.props.saveDefaultSettings}\n              title=\"Save current settings as your default\"\n            >\n              <SaveIcon role={'button'} />\n            </button>,\n            <button\n              className={'sk-button button sk-secondary-contrast'}\n              onClick={this.loadDefaultSettings}\n              title=\"Load your default settings\"\n            >\n              <RefreshIcon role={'button'} />\n            </button>,\n          ]}\n          <button\n            className={'sk-button button sk-secondary-contrast'}\n            onClick={this.props.refreshEditor}\n            title=\"Resize the editor\"\n          >\n            <WindowIcon role={'button'} />\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}